{"version":3,"file":"346.js","mappings":"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","sources":["webpack://imageus/./hooks/throttle.ts","webpack://imageus/./hooks/useIntersect.ts","webpack://imageus/./pages/ImageRoom/Components/ImageContent/styles.tsx","webpack://imageus/./pages/ImageRoom/Components/ImageContent/index.tsx","webpack://imageus/./pages/ImageRoom/Components/ImageContentList/styles.tsx","webpack://imageus/./pages/ImageRoom/Components/ImageContentList/index.tsx","webpack://imageus/./pages/ImageRoom/Components/ContentSection/styles.tsx","webpack://imageus/./pages/ImageRoom/Components/ContentSection/index.tsx","webpack://imageus/./pages/ImageRoom/styles.tsx","webpack://imageus/./pages/ImageRoom/index.tsx"],"sourcesContent":["/*\r\n    두 번째 인자로 timeout을 지정해 주는 경우 setTimout으로 Throttle을 사용하고\r\n    없을 경우 requestAnimationFrame로 구현해 부드러운 애니메이션을 표현할 수 있게 한다.\r\n*/\r\n\r\nconst throttle = (handler: (...args: any[]) => void, timeout = 2000) => {\r\n  let invokedTime: number;\r\n  let timer: number;\r\n\r\n  if (!timeout) {\r\n    return function (this: any, ...args: any[]) {\r\n      window.requestAnimationFrame(() => {\r\n        handler.apply(this, args);\r\n      });\r\n    };\r\n  } else {\r\n    return function (this: any, ...args: any[]) {\r\n      if (!invokedTime) {\r\n        handler.apply(this, args);\r\n        invokedTime = Date.now();\r\n      } else {\r\n        clearTimeout(timer);\r\n        timer = window.setTimeout(() => {\r\n          if (Date.now() - invokedTime >= timeout) {\r\n            handler.apply(this, args);\r\n            invokedTime = Date.now();\r\n          }\r\n        }, Math.max(timeout - (Date.now() - invokedTime), 0));\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\nexport default throttle;\r\n","import { useCallback, useEffect, useRef } from 'react';\r\nimport throttle from './throttle';\r\n\r\ntype IntersectHandler = (entry: IntersectionObserverEntry, observer: IntersectionObserver) => void;\r\n\r\nconst useIntersect = (onIntersect: IntersectHandler, options?: IntersectionObserverInit) => {\r\n  const ref = useRef(null);\r\n  const callback = useCallback(\r\n    throttle((entries: IntersectionObserverEntry[], observer: IntersectionObserver) => {\r\n      entries.forEach((entry) => {\r\n        if (entry.isIntersecting) onIntersect(entry, observer);\r\n      });\r\n    }, 200),\r\n    [onIntersect],\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!ref.current) return;\r\n    const observer = new IntersectionObserver(callback, options);\r\n    observer.observe(ref.current);\r\n    return () => observer.disconnect();\r\n  }, [ref, options, callback]);\r\n\r\n  return ref;\r\n};\r\n\r\nexport default useIntersect;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ContentBox = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  border-radius: 12px;\r\n\r\n  overflow: hidden;\r\n\r\n  a {\r\n    text-decoration: none;\r\n    color: black;\r\n  }\r\n  a:active {\r\n    color: black;\r\n  }\r\n  img {\r\n    position: absolute;\r\n\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n  }\r\n`;\r\n\r\nexport const ImageCard = styled.div`\r\n  position: relative;\r\n\r\n  padding-bottom: 100%;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const InfoContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  flex: 1;\r\n\r\n  font-size: 80%;\r\n  text-align: center;\r\n\r\n  background-color: whitesmoke;\r\n`;\r\n\r\nexport const HoverBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n\r\n  background: rgba(0, 0, 0, 0.3);\r\n\r\n  .btn_group {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    gap: 1rem;\r\n\r\n    button {\r\n      cursor: pointer;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ImageInfo = styled.div`\r\n  width: 100%;\r\n  padding: 10px 0;\r\n\r\n  & div:first-of-type {\r\n    margin-bottom: 5px;\r\n  }\r\n`;\r\n\r\nexport const EditBtn = styled.div`\r\n  position: absolute;\r\n  right: 10px;\r\n\r\n  width: 25px;\r\n  height: 40px;\r\n\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    display: block;\r\n\r\n    width: 25px;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nexport const EditImageMenu = styled.div`\r\n  position: absolute;\r\n  bottom: 45px;\r\n  left: 218px;\r\n  z-index: 100;\r\n\r\n  width: 150px;\r\n  box-shadow: 0 0.125rem 0.5rem rgb(0 0 0 / 30%),\r\n    0 0.0625rem 0.125rem rgb(0 0 0 / 20%);\r\n  border-radius: 12px;\r\n\r\n  background-color: mintcream;\r\n\r\n  &::after {\r\n    content: '';\r\n    position: absolute;\r\n    top: 100%;\r\n    left: 0.65em;\r\n\r\n    width: 0;\r\n    height: 0;\r\n\r\n    border: 0.55rem solid transparent;\r\n    border-bottom: none;\r\n    border-top-color: mintcream;\r\n    filter: drop-shadow(0 0.125rem 0.0625rem rgba(0, 0, 0, 0.1));\r\n  }\r\n\r\n  .delete_img {\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n      background-color: red;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const AertContainer = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n\r\n  background-color: grey;\r\n`;\r\n","import React, { memo, useEffect, useState } from 'react';\r\nimport useSWR, { useSWRConfig } from 'swr';\r\nimport { useLocation, useParams } from 'react-router';\r\n\r\nimport { CImageData } from '@typing/client';\r\nimport { Button } from '@styles/Button';\r\nimport {\r\n  ContentBox,\r\n  HoverBox,\r\n  ImageCard,\r\n  ImageInfo,\r\n  InfoContainer,\r\n} from './styles';\r\n\r\ninterface Props {\r\n  data: CImageData;\r\n  index: number;\r\n  thisArr: CImageData[];\r\n  observerRef?: React.MutableRefObject<null>;\r\n  sectionName?: string;\r\n}\r\n\r\nconst ImageContent = ({ data, index, thisArr, observerRef }: Props) => {\r\n  const currentPath = useLocation().pathname;\r\n  const { roomId } = useParams<{ roomId: string }>();\r\n  const { mutate } = useSWRConfig();\r\n\r\n  const { mutate: mutateDetailImageInfo } = useSWR('detailImageInfo');\r\n  const { data: roomImageList, mutate: fetchRoomImage } = useSWR(\r\n    `/image/${roomId}`,\r\n  );\r\n  const { data: deleteRoomImageId, isLoading: roomImageDeleting } = useSWR(\r\n    'roomImageDelete',\r\n    {\r\n      revalidateIfStale: false,\r\n      revalidateOnFocus: false,\r\n      revalidateOnReconnect: false,\r\n    },\r\n  );\r\n  const { data: userImageList, mutate: fetchUserImage } = useSWR(\r\n    '/user/imageDataList',\r\n  );\r\n  const { data: deleteUserImageId, isLoading: userImageDeleting } =\r\n    useSWR('userImageDelete');\r\n\r\n  const [isHover, setIsHover] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!roomImageList || roomImageDeleting || deleteRoomImageId !== data.id)\r\n      return;\r\n    const filteredList = roomImageList.filter(\r\n      (image: CImageData) => image.id !== data.id,\r\n    );\r\n    fetchRoomImage([...filteredList], false);\r\n  }, [deleteRoomImageId]);\r\n\r\n  useEffect(() => {\r\n    if (!userImageList || userImageDeleting || deleteUserImageId !== data.id)\r\n      return;\r\n    const filteredList = userImageList.filter(\r\n      (image: CImageData) => image.id !== data.id,\r\n    );\r\n    fetchUserImage([...filteredList], false);\r\n  }, [deleteUserImageId]);\r\n\r\n  const onClickShowAlertBox = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.stopPropagation();\r\n\r\n    const alertArgKey =\r\n      currentPath === '/my_page' ? '/image' : `/room/${roomId}/image`;\r\n\r\n    mutate('modalState', {\r\n      currentModalState: 'alert',\r\n      data: {\r\n        content: '정말 삭제하시겠습니까?',\r\n        mutateKey: alertArgKey,\r\n        imageId: data.id,\r\n      },\r\n    });\r\n  };\r\n\r\n  const onClickPictureInfo = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.stopPropagation();\r\n    mutate('modalState', { currentModalState: 'detailPicture' });\r\n    mutateDetailImageInfo({ index, data });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ContentBox\r\n        key={data.id}\r\n        ref={thisArr.length - 1 === index ? observerRef : undefined}\r\n        onMouseEnter={() => setIsHover(true)}\r\n        onMouseLeave={() => setIsHover(false)}\r\n      >\r\n        <ImageCard>\r\n          <img src={data.link} />\r\n        </ImageCard>\r\n        <InfoContainer>\r\n          <ImageInfo>\r\n            <div>\r\n              <span>작성자: {data.user_name}</span>\r\n            </div>\r\n            <div>\r\n              <span>작성일: {data.created_at}</span>\r\n            </div>\r\n          </ImageInfo>\r\n        </InfoContainer>\r\n        {isHover && (\r\n          <HoverBox>\r\n            <div className=\"btn_group\">\r\n              <Button type=\"button\" onClick={onClickPictureInfo}>\r\n                자세히 보기\r\n              </Button>\r\n              {data.user_id + '' === sessionStorage.getItem('user_id') && (\r\n                <Button\r\n                  type=\"button\"\r\n                  className=\"error\"\r\n                  onClick={onClickShowAlertBox}\r\n                >\r\n                  게시물 삭제하기\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </HoverBox>\r\n        )}\r\n      </ContentBox>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(ImageContent);\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ImageLayout = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, auto);\r\n  gap: 2rem;\r\n\r\n  @media screen and (min-width: 450px) {\r\n    grid-template-columns: repeat(3, auto);\r\n  }\r\n\r\n  @media screen and (min-width: 1024px) {\r\n    grid-template-columns: repeat(4, auto);\r\n  }\r\n`;\r\n\r\nexport const NotImageData = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  margin-top: 30px;\r\n  font-size: 1.3rem;\r\n`;\r\n","import React, { memo } from 'react';\r\nimport { IconContext } from 'react-icons/lib';\r\nimport { FcRemoveImage } from 'react-icons/fc';\r\n\r\nimport { CImageData } from '@typing/client';\r\nimport ImageContent from '../ImageContent';\r\nimport { ImageLayout, NotImageData } from './styles';\r\n\r\ninterface Props {\r\n  ImageData: CImageData[];\r\n  sectionName?: string;\r\n  observerRef?: React.MutableRefObject<null>;\r\n}\r\n\r\nconst ImageContentList = ({ ImageData, observerRef, sectionName }: Props) => {\r\n  const imageCard = (\r\n    data: CImageData,\r\n    index: number,\r\n    thisArr: CImageData[],\r\n  ) => (\r\n    <ImageContent\r\n      key={data.id}\r\n      sectionName={sectionName}\r\n      data={data}\r\n      index={index}\r\n      thisArr={thisArr}\r\n      observerRef={observerRef}\r\n    />\r\n  );\r\n  return (\r\n    <>\r\n      {ImageData.length !== 0 ? (\r\n        <ImageLayout>{ImageData.map(imageCard)}</ImageLayout>\r\n      ) : (\r\n        <NotImageData>\r\n          <IconContext.Provider\r\n            value={{\r\n              size: '30%',\r\n              style: { display: 'inline-block', maxWidth: '250px' },\r\n            }}\r\n          >\r\n            <FcRemoveImage />\r\n          </IconContext.Provider>\r\n          <span>이미지가 없습니다.</span>\r\n        </NotImageData>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(ImageContentList);\r\n","import styled from '@emotion/styled';\r\n\r\nexport const MainContainer = styled.main`\r\n  position: relative;\r\n\r\n  .tag {\r\n    position: relative;\r\n    display: inline-block;\r\n\r\n    font-size: 1.3rem;\r\n    height: 2rem;\r\n    padding: 0 20px 0 23px;\r\n    margin: 0 20px 20px 0;\r\n    border-radius: 3px 0 0 3px;\r\n    line-height: 2rem;\r\n\r\n    color: white;\r\n    background: #5b7cfa;\r\n    text-decoration: none;\r\n  }\r\n\r\n  .tag::before {\r\n    position: absolute;\r\n    top: 13px;\r\n    left: 10px;\r\n\r\n    width: 6px;\r\n    height: 6px;\r\n    border-radius: 10px;\r\n\r\n    background: #fff;\r\n    box-shadow: inset 0 1px rgb(0 0 0 / 25%);\r\n    content: '';\r\n  }\r\n\r\n  .tag::after {\r\n    position: absolute;\r\n    right: 0;\r\n    top: 0;\r\n\r\n    content: '';\r\n    background: #fff;\r\n    border-bottom: 18px solid transparent;\r\n    border-left: 13px solid #5b7cfa;\r\n    border-top: 15px solid transparent;\r\n  }\r\n`;\r\n\r\nexport const ActiveContentBox = styled.div`\r\n  position: relative;\r\n\r\n  .active_icon_box {\r\n    position: absolute;\r\n    top: 20px;\r\n    left: 50px;\r\n    display: flex;\r\n\r\n    gap: 1rem;\r\n\r\n    .sidebar_icon {\r\n      cursor: pointer;\r\n    }\r\n\r\n    .leave_icon {\r\n      cursor: pointer;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const FilteringOption = styled.div`\r\n  position: absolute;\r\n  top: -65px;\r\n  right: 0px;\r\n\r\n  width: 180px;\r\n  height: 20px;\r\n  padding: 12px 14px;\r\n\r\n  background-color: #fff;\r\n  border: 1px solid #e2eded;\r\n  border-color: #eaf1f1 #e4eded #dbe7e7 #e4eded;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n\r\n  #options-view-button {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    z-index: 3;\r\n\r\n    width: 100%;\r\n    height: 100%;\r\n    margin: 0;\r\n    opacity: 0;\r\n\r\n    cursor: pointer;\r\n  }\r\n\r\n  #select-button {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n\r\n    height: 100%;\r\n\r\n    #chevrons {\r\n      display: flex;\r\n      flex-direction: column;\r\n    }\r\n  }\r\n\r\n  .options {\r\n    position: absolute;\r\n    top: 45px;\r\n    right: 0;\r\n    left: 0;\r\n    z-index: 10;\r\n\r\n    width: 209px;\r\n    border-radius: 4px;\r\n    background-color: #fff;\r\n    box-shadow: 0 0.125rem 0.05rem rgb(0 0 0 / 30%),\r\n      0 0.0625rem 0.125rem rgb(0 0 0 / 20%);\r\n    text-align: center;\r\n\r\n    .option {\r\n      padding: 5px 0;\r\n    }\r\n\r\n    & .option:hover {\r\n      background-color: whitesmoke;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ContentBox = styled.div`\r\n  position: absolute;\r\n  top: 120px;\r\n\r\n  width: 100%;\r\n  padding-bottom: 40px;\r\n\r\n  .content_box_pos {\r\n    position: relative;\r\n\r\n    width: 85%;\r\n    margin: auto;\r\n\r\n    .select_date {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: end;\r\n\r\n      gap: 1rem;\r\n\r\n      .select_date_c {\r\n        display: flex;\r\n        align-items: center;\r\n\r\n        label {\r\n          margin-right: 8px;\r\n        }\r\n      }\r\n\r\n      button {\r\n        font-size: 0.75rem;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ImageCard = styled.div`\r\n  position: relative;\r\n\r\n  padding-bottom: 100%;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const ImageInfo = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  text-align: center;\r\n  background-color: whitesmoke;\r\n`;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport useSWR, { mutate } from 'swr';\r\nimport useSWRMutation from 'swr/mutation';\r\n\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport { TbDoorExit } from 'react-icons/tb';\r\nimport { IconContext } from 'react-icons/lib';\r\nimport {\r\n  MdKeyboardArrowDown,\r\n  MdKeyboardArrowUp,\r\n  MdOutlineSpaceDashboard,\r\n} from 'react-icons/md';\r\n\r\nimport useIntersect from '@hooks/useIntersect';\r\nimport { CImageData } from '@typing/client';\r\nimport {\r\n  getDefaultImgFetcher,\r\n  getFilterImgFetcher,\r\n  getUnreadImageList,\r\n} from '@utils/roomDataFetcher';\r\nimport { Button } from '@styles/Button';\r\nimport Spinner from '@styles/Spinner';\r\nimport { SidebarContext } from '@layouts/AppLayout';\r\n\r\nimport ImageContentList from '../ImageContentList';\r\nimport {\r\n  ContentBox,\r\n  ActiveContentBox,\r\n  FilteringOption,\r\n  MainContainer,\r\n} from './styles';\r\nimport { getImageData } from '@utils/imageFetcher';\r\n\r\ninterface SelectTerm {\r\n  startDate?: string;\r\n  endDate?: string;\r\n}\r\n\r\nconst ContentSection = ({ roomId }: { roomId?: string }) => {\r\n  const { data: realTimeImageList } = useSWR(\r\n    `/room/${roomId}/unread-imagelist`,\r\n    getUnreadImageList,\r\n    {\r\n      revalidateOnFocus: false,\r\n      revalidateOnMount: false,\r\n      revalidateOnReconnect: false,\r\n      refreshInterval: 500000,\r\n    },\r\n  );\r\n  const { data: postedImage, mutate: mutatePostedImage } = useSWR<CImageData[]>(\r\n    `/image/${roomId}`,\r\n    {\r\n      fallbackData: [],\r\n    },\r\n  );\r\n  const { data: filterImage, mutate: mutateFilterImage } = useSWR<CImageData[]>(\r\n    `/image/${roomId}/filter`,\r\n    {\r\n      fallbackData: [],\r\n    },\r\n  );\r\n\r\n  const {\r\n    data: defaultImageList,\r\n    trigger: defaultImgListTrigger,\r\n    isMutating: defaultImgListLoading,\r\n  } = useSWRMutation(`/room/${roomId}/imagelist`, getDefaultImgFetcher);\r\n\r\n  const {\r\n    data: filterImageList,\r\n    trigger: filterImgListTrigger,\r\n    isMutating: filterImgListLoading,\r\n  } = useSWRMutation(`/room/${roomId}/imagelist/bydate`, getFilterImgFetcher);\r\n\r\n  const { trigger: imgDataListTrigger, isMutating: imgDataLoading } =\r\n    useSWRMutation('/room/imageData', getImageData);\r\n\r\n  const [readStartNumber, setReadStartNumber] = useState(0);\r\n  const [filterBoxState, setFilterBoxState] = useState(false);\r\n  const [filterName, setFilterName] = useState('기본 게시물');\r\n  const [filterSelectTerm, setFilterSelectTerm] = useState<SelectTerm>();\r\n\r\n  const filterStartDateInputRef = useRef<HTMLInputElement>(null);\r\n  const filterEndDateInputRef = useRef<HTMLInputElement>(null);\r\n  const observerRef = useIntersect(\r\n    async (entry, observer) => {\r\n      observer.unobserve(entry.target);\r\n      if (\r\n        !filterSelectTerm &&\r\n        !defaultImgListLoading &&\r\n        !imgDataLoading &&\r\n        defaultImageList?.loadDataLength === 12\r\n      ) {\r\n        defaultImgListTrigger({\r\n          start: readStartNumber,\r\n        });\r\n      }\r\n\r\n      if (\r\n        filterSelectTerm &&\r\n        !filterImgListLoading &&\r\n        !imgDataLoading &&\r\n        filterImageList?.loadDataLength === 12\r\n      ) {\r\n        filterImgListTrigger({\r\n          start: readStartNumber,\r\n          start_date: filterSelectTerm.startDate,\r\n          end_date: filterSelectTerm.endDate,\r\n        });\r\n      }\r\n    },\r\n    {\r\n      threshold: 0.5,\r\n    },\r\n  );\r\n\r\n  if (!postedImage || !filterImage) {\r\n    return <div>로딩중...</div>;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!filterSelectTerm) {\r\n      defaultImgListTrigger({\r\n        start: readStartNumber,\r\n      });\r\n    } else {\r\n      filterImgListTrigger({\r\n        start: readStartNumber,\r\n        start_date: filterSelectTerm?.startDate,\r\n        end_date: filterSelectTerm?.endDate,\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      mutatePostedImage([], false);\r\n      mutateFilterImage([], false);\r\n    };\r\n  }, [roomId, filterSelectTerm]);\r\n\r\n  useEffect(() => {\r\n    if (!defaultImageList?.imagelist) return;\r\n\r\n    setReadStartNumber((prev) => prev + 12);\r\n\r\n    mutatePostedImage(\r\n      async () => await imgDataListTrigger(defaultImageList.imagelist),\r\n      {\r\n        populateCache: (newData, currentData) => {\r\n          if (currentData) {\r\n            return [...currentData, ...newData];\r\n          } else {\r\n            return [...newData];\r\n          }\r\n        },\r\n        revalidate: false,\r\n      },\r\n    );\r\n  }, [defaultImageList]);\r\n\r\n  useEffect(() => {\r\n    if (!filterImageList?.imagelist) return;\r\n\r\n    setReadStartNumber((prev) => prev + 12);\r\n\r\n    mutateFilterImage(\r\n      async () => await imgDataListTrigger(filterImageList.imagelist),\r\n      {\r\n        populateCache: (newData, currentData) => {\r\n          if (currentData) {\r\n            return [...currentData, ...newData];\r\n          } else {\r\n            return [...newData];\r\n          }\r\n        },\r\n        revalidate: false,\r\n      },\r\n    );\r\n  }, [filterImageList]);\r\n\r\n  useEffect(() => {\r\n    if (!realTimeImageList) return;\r\n\r\n    mutatePostedImage(async () => await imgDataListTrigger(realTimeImageList), {\r\n      populateCache: (newData, currentData) => {\r\n        if (currentData) {\r\n          return [...newData, ...currentData];\r\n        } else {\r\n          return [...newData];\r\n        }\r\n      },\r\n      revalidate: false,\r\n    });\r\n  }, [realTimeImageList]);\r\n\r\n  const getDateString = (dateValue: Date) => {\r\n    const selectDate = `${dateValue.getFullYear()}-${\r\n      dateValue.getMonth() + 1 >= 13 ? 0 : dateValue.getMonth() + 1\r\n    }-${dateValue.getDate()}`;\r\n\r\n    return { selectDate };\r\n  };\r\n\r\n  const onClickFilteringItem = (filterName: string) => () => {\r\n    if (filterName === 'today') {\r\n      setFilterName('오늘 날짜');\r\n      const { selectDate } = getDateString(new Date());\r\n\r\n      setReadStartNumber(0);\r\n      setFilterSelectTerm({\r\n        startDate: selectDate,\r\n        endDate: selectDate,\r\n      });\r\n    } else if (filterName === 'yesterday') {\r\n      setFilterName('어제 날짜');\r\n      const dateValue = new Date();\r\n      dateValue.setDate(dateValue.getDate() - 1);\r\n      const { selectDate } = getDateString(dateValue);\r\n\r\n      setReadStartNumber(0);\r\n      setFilterSelectTerm({\r\n        startDate: selectDate,\r\n        endDate: selectDate,\r\n      });\r\n    } else if (filterName === 'selectDay') {\r\n      setFilterName('기간 선택');\r\n      setReadStartNumber(0);\r\n    } else {\r\n      setFilterName('기본 게시물');\r\n      setReadStartNumber(0);\r\n      setFilterSelectTerm(undefined);\r\n    }\r\n  };\r\n\r\n  const onClickCertainPeriodFilterBtn = () => {\r\n    const startDate = filterStartDateInputRef.current?.value;\r\n    const endDate = filterEndDateInputRef.current?.value;\r\n\r\n    if (\r\n      startDate === filterSelectTerm?.startDate &&\r\n      endDate === filterSelectTerm?.endDate\r\n    )\r\n      return;\r\n\r\n    if (!startDate || !endDate) {\r\n      alert('날짜가 선택되지 않았습니다.');\r\n      return;\r\n    }\r\n\r\n    setReadStartNumber(0);\r\n    setFilterSelectTerm({ startDate, endDate });\r\n  };\r\n\r\n  const onClickLeaveRoom = () => {\r\n    const userId = sessionStorage.getItem('user_id');\r\n    mutate('modalState', {\r\n      currentModalState: 'alert',\r\n      data: {\r\n        content: '방에서 나가시겠습니까?',\r\n        mutateKey: `/user/${userId}/room`,\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Scrollbars>\r\n      <section>\r\n        <MainContainer>\r\n          <ActiveContentBox>\r\n            <div className=\"active_icon_box\">\r\n              <SidebarContext.Consumer>\r\n                {({ setSidebarState }) => (\r\n                  <div\r\n                    className=\"sidebar_icon\"\r\n                    onClick={() => {\r\n                      setSidebarState((prev) => !prev);\r\n                    }}\r\n                  >\r\n                    <IconContext.Provider\r\n                      value={{\r\n                        size: '30px',\r\n                        style: { display: 'inline-block' },\r\n                      }}\r\n                    >\r\n                      <MdOutlineSpaceDashboard />\r\n                    </IconContext.Provider>\r\n                  </div>\r\n                )}\r\n              </SidebarContext.Consumer>\r\n              <div className=\"leave_icon\" onClick={onClickLeaveRoom}>\r\n                <IconContext.Provider\r\n                  value={{\r\n                    size: '30px',\r\n                    style: { display: 'inline-block' },\r\n                  }}\r\n                >\r\n                  <TbDoorExit />\r\n                </IconContext.Provider>\r\n              </div>\r\n            </div>\r\n          </ActiveContentBox>\r\n\r\n          <ContentBox>\r\n            <div className=\"content_box_pos\">\r\n              <FilteringOption\r\n                onClick={() => setFilterBoxState((prev) => !prev)}\r\n              >\r\n                <input type=\"checkbox\" id=\"options-view-button\" />\r\n                <div id=\"select-button\">\r\n                  <div className=\"selected-value\">\r\n                    <span>{filterName}</span>\r\n                  </div>\r\n                  <div id=\"chevrons\">\r\n                    <MdKeyboardArrowUp />\r\n                    <MdKeyboardArrowDown />\r\n                  </div>\r\n                </div>\r\n                {filterBoxState && (\r\n                  <div className=\"options\">\r\n                    <div\r\n                      className=\"option\"\r\n                      onClick={onClickFilteringItem('today')}\r\n                    >\r\n                      <span>오늘 날짜</span>\r\n                    </div>\r\n                    <div\r\n                      className=\"option\"\r\n                      onClick={onClickFilteringItem('yesterday')}\r\n                    >\r\n                      <span>어제 날짜</span>\r\n                    </div>\r\n                    <div\r\n                      className=\"option\"\r\n                      onClick={onClickFilteringItem('selectDay')}\r\n                    >\r\n                      <span>기간 선택</span>\r\n                    </div>\r\n                    <div\r\n                      className=\"option\"\r\n                      onClick={onClickFilteringItem('default')}\r\n                    >\r\n                      <span>기본 게시물</span>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </FilteringOption>\r\n              {filterName === '기간 선택' && (\r\n                <div className=\"select_date\">\r\n                  <div className=\"select_date_c\">\r\n                    <label>시작날</label>\r\n                    <input type=\"date\" ref={filterStartDateInputRef} />\r\n                  </div>\r\n                  <div className=\"select_date_c\">\r\n                    <label>마지막날</label>\r\n                    <input type=\"date\" ref={filterEndDateInputRef} />\r\n                  </div>\r\n                  <Button type=\"button\" onClick={onClickCertainPeriodFilterBtn}>\r\n                    확인\r\n                  </Button>\r\n                </div>\r\n              )}\r\n              <div className=\"tag\">\r\n                <span>\r\n                  {filterSelectTerm ? '필터링된 이미지' : '게시된 이미지'}\r\n                </span>\r\n              </div>\r\n              <ImageContentList\r\n                ImageData={filterSelectTerm ? filterImage : postedImage}\r\n                observerRef={observerRef}\r\n              />\r\n              {(defaultImgListLoading ||\r\n                filterImgListLoading ||\r\n                imgDataLoading) && <Spinner />}\r\n            </div>\r\n          </ContentBox>\r\n        </MainContainer>\r\n      </section>\r\n    </Scrollbars>\r\n  );\r\n};\r\n\r\nexport default ContentSection;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ContentSectionWrapper = styled.div`\r\n  height: 100%;\r\n\r\n  .upload_icon {\r\n    position: fixed;\r\n    top: 65%;\r\n    right: 50px;\r\n    text-align: center;\r\n\r\n    width: 40px;\r\n    padding: 7px;\r\n    border-radius: 5px;\r\n    font-size: 0.8rem;\r\n\r\n    color: #6296de;\r\n    background-color: ghostwhite;\r\n    box-shadow: 0px 1px 1px 2px #e0e6e6b3;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport useSWR, { mutate } from 'swr';\r\nimport { Navigate, useParams } from 'react-router';\r\n\r\nimport { IconContext } from 'react-icons/lib';\r\nimport { SlCloudUpload } from 'react-icons/sl';\r\n\r\nimport { DRoomData } from '@typing/db';\r\nimport AppLayout from '@layouts/AppLayout';\r\nimport ContentSection from './Components/ContentSection';\r\nimport { ContentSectionWrapper } from './styles';\r\nimport { getUserRoomListFetcher } from '@utils/userDataFetcher';\r\n\r\nconst ImageRoom = () => {\r\n  const { roomId } = useParams<{ roomId: string }>();\r\n  const userId = sessionStorage.getItem('user_id');\r\n  const { data: roomListInfo } = useSWR(\r\n    `/user/${userId}/roomlist`,\r\n    getUserRoomListFetcher,\r\n    {\r\n      revalidateIfStale: false,\r\n      revalidateOnFocus: false,\r\n      revalidateOnReconnect: false,\r\n    },\r\n  );\r\n\r\n  const checkValideRoomId = () => {\r\n    if (!roomListInfo) return false;\r\n\r\n    const isValidRoomId = roomListInfo.some((roomInfo: DRoomData) => {\r\n      return '' + roomInfo.id === roomId;\r\n    });\r\n\r\n    return isValidRoomId;\r\n  };\r\n\r\n  const onClickUploadModal = () => {\r\n    mutate('modalState', { currentModalState: 'upload' });\r\n  };\r\n\r\n  if (!checkValideRoomId()) {\r\n    return <Navigate to=\"/\" />;\r\n  }\r\n\r\n  return (\r\n    <AppLayout isImageRoom>\r\n      <ContentSectionWrapper>\r\n        <ContentSection key={roomId} roomId={roomId} />\r\n        <div onClick={onClickUploadModal} className=\"upload_icon\">\r\n          <IconContext.Provider\r\n            value={{\r\n              size: '100%',\r\n              style: { display: 'inline-block' },\r\n            }}\r\n          >\r\n            <SlCloudUpload />\r\n          </IconContext.Provider>\r\n          <span>업로드</span>\r\n        </div>\r\n      </ContentSectionWrapper>\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nexport default ImageRoom;\r\n"],"names":["onIntersect","options","ref","useRef","callback","useCallback","handler","invokedTime","timer","timeout","args","clearTimeout","window","setTimeout","Date","now","apply","Math","max","this","requestAnimationFrame","throttle","entries","observer","forEach","entry","isIntersecting","useEffect","current","IntersectionObserver","observe","disconnect","ContentBox","styled","ImageCard","InfoContainer","HoverBox","ImageInfo","ImageContent","data","index","thisArr","observerRef","currentPath","useLocation","pathname","roomId","useParams","mutate","useSWRConfig","mutateDetailImageInfo","useSWR","roomImageList","fetchRoomImage","revalidateIfStale","revalidateOnFocus","revalidateOnReconnect","deleteRoomImageId","roomImageDeleting","isLoading","userImageList","fetchUserImage","deleteUserImageId","userImageDeleting","useState","isHover","setIsHover","id","filteredList","filter","image","key","length","undefined","onMouseEnter","onMouseLeave","src","link","user_name","created_at","className","Button","type","onClick","e","stopPropagation","currentModalState","user_id","sessionStorage","getItem","alertArgKey","content","mutateKey","imageId","memo","ImageLayout","NotImageData","ImageContentList","ImageData","sectionName","map","value","size","style","display","maxWidth","MainContainer","ActiveContentBox","FilteringOption","i","realTimeImageList","getUnreadImageList","revalidateOnMount","refreshInterval","fallbackData","postedImage","mutatePostedImage","filterImage","mutateFilterImage","useSWRMutation","getDefaultImgFetcher","defaultImageList","defaultImgListTrigger","trigger","defaultImgListLoading","isMutating","getFilterImgFetcher","filterImageList","filterImgListTrigger","filterImgListLoading","getImageData","imgDataListTrigger","imgDataLoading","readStartNumber","setReadStartNumber","filterBoxState","setFilterBoxState","filterName","setFilterName","filterSelectTerm","setFilterSelectTerm","filterStartDateInputRef","filterEndDateInputRef","useIntersect","unobserve","target","loadDataLength","start","start_date","startDate","end_date","endDate","threshold","imagelist","prev","populateCache","newData","currentData","revalidate","getDateString","dateValue","selectDate","getFullYear","getMonth","getDate","onClickFilteringItem","setDate","setSidebarState","userId","alert","Spinner","ContentSectionWrapper","roomListInfo","getUserRoomListFetcher","some","roomInfo","AppLayout","isImageRoom","to"],"sourceRoot":""}