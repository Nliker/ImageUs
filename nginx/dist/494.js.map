{"version":3,"file":"494.js","mappings":"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","sources":["webpack://imageus/./hooks/throttle.ts","webpack://imageus/./hooks/useIntersect.ts","webpack://imageus/./pages/ImageRoom/Components/ImageContent/styles.tsx","webpack://imageus/./pages/ImageRoom/Components/ImageContent/index.tsx","webpack://imageus/./pages/ImageRoom/Components/ImageContentList/styles.tsx","webpack://imageus/./pages/ImageRoom/Components/ImageContentList/index.tsx","webpack://imageus/./pages/MyPage/Components/MyProfile/styles.tsx","webpack://imageus/./pages/MyPage/Components/MyProfile/index.tsx","webpack://imageus/./pages/MyPage/Components/MyPictures/styles.tsx","webpack://imageus/./pages/MyPage/Components/MyPictures/index.tsx","webpack://imageus/./pages/MyPage/styles.tsx","webpack://imageus/./pages/MyPage/index.tsx"],"sourcesContent":["/*\r\n    두 번째 인자로 timeout을 지정해 주는 경우 setTimout으로 Throttle을 사용하고\r\n    없을 경우 requestAnimationFrame로 구현해 부드러운 애니메이션을 표현할 수 있게 한다.\r\n*/\r\n\r\nconst throttle = (handler: (...args: any[]) => void, timeout = 2000) => {\r\n  let invokedTime: number;\r\n  let timer: number;\r\n\r\n  if (!timeout) {\r\n    return function (this: any, ...args: any[]) {\r\n      window.requestAnimationFrame(() => {\r\n        handler.apply(this, args);\r\n      });\r\n    };\r\n  } else {\r\n    return function (this: any, ...args: any[]) {\r\n      if (!invokedTime) {\r\n        handler.apply(this, args);\r\n        invokedTime = Date.now();\r\n      } else {\r\n        clearTimeout(timer);\r\n        timer = window.setTimeout(() => {\r\n          if (Date.now() - invokedTime >= timeout) {\r\n            handler.apply(this, args);\r\n            invokedTime = Date.now();\r\n          }\r\n        }, Math.max(timeout - (Date.now() - invokedTime), 0));\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\nexport default throttle;\r\n","import { useCallback, useEffect, useRef } from 'react';\r\nimport throttle from './throttle';\r\n\r\ntype IntersectHandler = (entry: IntersectionObserverEntry, observer: IntersectionObserver) => void;\r\n\r\nconst useIntersect = (onIntersect: IntersectHandler, options?: IntersectionObserverInit) => {\r\n  const ref = useRef(null);\r\n  const callback = useCallback(\r\n    throttle((entries: IntersectionObserverEntry[], observer: IntersectionObserver) => {\r\n      entries.forEach((entry) => {\r\n        if (entry.isIntersecting) onIntersect(entry, observer);\r\n      });\r\n    }, 200),\r\n    [onIntersect],\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!ref.current) return;\r\n    const observer = new IntersectionObserver(callback, options);\r\n    observer.observe(ref.current);\r\n    return () => observer.disconnect();\r\n  }, [ref, options, callback]);\r\n\r\n  return ref;\r\n};\r\n\r\nexport default useIntersect;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ContentBox = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  border-radius: 12px;\r\n\r\n  overflow: hidden;\r\n\r\n  a {\r\n    text-decoration: none;\r\n    color: black;\r\n  }\r\n  a:active {\r\n    color: black;\r\n  }\r\n  img {\r\n    position: absolute;\r\n\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n  }\r\n`;\r\n\r\nexport const ImageCard = styled.div`\r\n  position: relative;\r\n\r\n  padding-bottom: 100%;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const InfoContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  flex: 1;\r\n\r\n  font-size: 80%;\r\n  text-align: center;\r\n\r\n  background-color: whitesmoke;\r\n`;\r\n\r\nexport const HoverBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n\r\n  background: rgba(0, 0, 0, 0.3);\r\n\r\n  .btn_group {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    gap: 1rem;\r\n\r\n    button {\r\n      cursor: pointer;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ImageInfo = styled.div`\r\n  width: 100%;\r\n  padding: 10px 0;\r\n\r\n  & div:first-of-type {\r\n    margin-bottom: 5px;\r\n  }\r\n`;\r\n\r\nexport const EditBtn = styled.div`\r\n  position: absolute;\r\n  right: 10px;\r\n\r\n  width: 25px;\r\n  height: 40px;\r\n\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    display: block;\r\n\r\n    width: 25px;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nexport const EditImageMenu = styled.div`\r\n  position: absolute;\r\n  bottom: 45px;\r\n  left: 218px;\r\n  z-index: 100;\r\n\r\n  width: 150px;\r\n  box-shadow: 0 0.125rem 0.5rem rgb(0 0 0 / 30%),\r\n    0 0.0625rem 0.125rem rgb(0 0 0 / 20%);\r\n  border-radius: 12px;\r\n\r\n  background-color: mintcream;\r\n\r\n  &::after {\r\n    content: '';\r\n    position: absolute;\r\n    top: 100%;\r\n    left: 0.65em;\r\n\r\n    width: 0;\r\n    height: 0;\r\n\r\n    border: 0.55rem solid transparent;\r\n    border-bottom: none;\r\n    border-top-color: mintcream;\r\n    filter: drop-shadow(0 0.125rem 0.0625rem rgba(0, 0, 0, 0.1));\r\n  }\r\n\r\n  .delete_img {\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n      background-color: red;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const AertContainer = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n\r\n  background-color: grey;\r\n`;\r\n","import React, { memo, useEffect, useState } from 'react';\r\nimport useSWR, { useSWRConfig } from 'swr';\r\nimport { useLocation, useParams } from 'react-router';\r\n\r\nimport { CImageData } from '@typing/client';\r\nimport { Button } from '@styles/Button';\r\nimport {\r\n  ContentBox,\r\n  HoverBox,\r\n  ImageCard,\r\n  ImageInfo,\r\n  InfoContainer,\r\n} from './styles';\r\n\r\ninterface Props {\r\n  data: CImageData;\r\n  index: number;\r\n  thisArr: CImageData[];\r\n  observerRef?: React.MutableRefObject<null>;\r\n  sectionName?: string;\r\n}\r\n\r\nconst ImageContent = ({ data, index, thisArr, observerRef }: Props) => {\r\n  const currentPath = useLocation().pathname;\r\n  const { roomId } = useParams<{ roomId: string }>();\r\n  const { mutate } = useSWRConfig();\r\n\r\n  const { mutate: mutateDetailImageInfo } = useSWR('detailImageInfo');\r\n  const { data: roomImageList, mutate: fetchRoomImage } = useSWR(\r\n    `/image/${roomId}`,\r\n  );\r\n  const { data: deleteRoomImageId, isLoading: roomImageDeleting } = useSWR(\r\n    'roomImageDelete',\r\n    {\r\n      revalidateIfStale: false,\r\n      revalidateOnFocus: false,\r\n      revalidateOnReconnect: false,\r\n    },\r\n  );\r\n  const { data: userImageList, mutate: fetchUserImage } = useSWR(\r\n    '/user/imageDataList',\r\n  );\r\n  const { data: deleteUserImageId, isLoading: userImageDeleting } =\r\n    useSWR('userImageDelete');\r\n\r\n  const [isHover, setIsHover] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!roomImageList || roomImageDeleting || deleteRoomImageId !== data.id)\r\n      return;\r\n    const filteredList = roomImageList.filter(\r\n      (image: CImageData) => image.id !== data.id,\r\n    );\r\n    fetchRoomImage([...filteredList], false);\r\n  }, [deleteRoomImageId]);\r\n\r\n  useEffect(() => {\r\n    if (!userImageList || userImageDeleting || deleteUserImageId !== data.id)\r\n      return;\r\n    const filteredList = userImageList.filter(\r\n      (image: CImageData) => image.id !== data.id,\r\n    );\r\n    fetchUserImage([...filteredList], false);\r\n  }, [deleteUserImageId]);\r\n\r\n  const onClickShowAlertBox = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.stopPropagation();\r\n\r\n    const alertArgKey =\r\n      currentPath === '/my_page' ? '/image' : `/room/${roomId}/image`;\r\n\r\n    mutate('modalState', {\r\n      currentModalState: 'alert',\r\n      data: {\r\n        content: '정말 삭제하시겠습니까?',\r\n        mutateKey: alertArgKey,\r\n        imageId: data.id,\r\n      },\r\n    });\r\n  };\r\n\r\n  const onClickPictureInfo = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.stopPropagation();\r\n    mutate('modalState', { currentModalState: 'detailPicture' });\r\n    mutateDetailImageInfo({ index, data });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ContentBox\r\n        key={data.id}\r\n        ref={thisArr.length - 1 === index ? observerRef : undefined}\r\n        onMouseEnter={() => setIsHover(true)}\r\n        onMouseLeave={() => setIsHover(false)}\r\n      >\r\n        <ImageCard>\r\n          <img src={data.link} />\r\n        </ImageCard>\r\n        <InfoContainer>\r\n          <ImageInfo>\r\n            <div>\r\n              <span>작성자: {data.user_name}</span>\r\n            </div>\r\n            <div>\r\n              <span>작성일: {data.created_at}</span>\r\n            </div>\r\n          </ImageInfo>\r\n        </InfoContainer>\r\n        {isHover && (\r\n          <HoverBox>\r\n            <div className=\"btn_group\">\r\n              <Button type=\"button\" onClick={onClickPictureInfo}>\r\n                자세히 보기\r\n              </Button>\r\n              {data.user_id + '' === sessionStorage.getItem('user_id') && (\r\n                <Button\r\n                  type=\"button\"\r\n                  className=\"error\"\r\n                  onClick={onClickShowAlertBox}\r\n                >\r\n                  게시물 삭제하기\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </HoverBox>\r\n        )}\r\n      </ContentBox>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(ImageContent);\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ImageLayout = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, auto);\r\n  gap: 2rem;\r\n\r\n  @media screen and (min-width: 450px) {\r\n    grid-template-columns: repeat(3, auto);\r\n  }\r\n\r\n  @media screen and (min-width: 1024px) {\r\n    grid-template-columns: repeat(4, auto);\r\n  }\r\n`;\r\n\r\nexport const NotImageData = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  margin-top: 30px;\r\n  font-size: 1.3rem;\r\n`;\r\n","import React, { memo } from 'react';\r\nimport { IconContext } from 'react-icons/lib';\r\nimport { FcRemoveImage } from 'react-icons/fc';\r\n\r\nimport { CImageData } from '@typing/client';\r\nimport ImageContent from '../ImageContent';\r\nimport { ImageLayout, NotImageData } from './styles';\r\n\r\ninterface Props {\r\n  ImageData: CImageData[];\r\n  sectionName?: string;\r\n  observerRef?: React.MutableRefObject<null>;\r\n}\r\n\r\nconst ImageContentList = ({ ImageData, observerRef, sectionName }: Props) => {\r\n  const imageCard = (\r\n    data: CImageData,\r\n    index: number,\r\n    thisArr: CImageData[],\r\n  ) => (\r\n    <ImageContent\r\n      key={data.id}\r\n      sectionName={sectionName}\r\n      data={data}\r\n      index={index}\r\n      thisArr={thisArr}\r\n      observerRef={observerRef}\r\n    />\r\n  );\r\n  return (\r\n    <>\r\n      {ImageData.length !== 0 ? (\r\n        <ImageLayout>{ImageData.map(imageCard)}</ImageLayout>\r\n      ) : (\r\n        <NotImageData>\r\n          <IconContext.Provider\r\n            value={{\r\n              size: '30%',\r\n              style: { display: 'inline-block', maxWidth: '250px' },\r\n            }}\r\n          >\r\n            <FcRemoveImage />\r\n          </IconContext.Provider>\r\n          <span>이미지가 없습니다.</span>\r\n        </NotImageData>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(ImageContentList);\r\n","import styled from '@emotion/styled';\r\n\r\nexport const InfoSection = styled.section`\r\n  margin: auto;\r\n  max-width: 800px;\r\n  margin-top: 40px;\r\n`;\r\n\r\nexport const InfoTable = styled.table`\r\n  table-layout: fixed;\r\n\r\n  width: 100%;\r\n  font-size: 14px;\r\n  border-radius: 15px;\r\n  box-shadow: -2px 2px 2px 2px rgb(0 0 0 / 40%);\r\n\r\n  text-align: center;\r\n  border-collapse: collapse;\r\n  background-color: white;\r\n  overflow: hidden;\r\n\r\n  tbody {\r\n    tr td,\r\n    tr th {\r\n      padding: 15px 0;\r\n    }\r\n\r\n    tr {\r\n      height: 5rem;\r\n      .btn_group {\r\n        display: flex;\r\n\r\n        gap: 1rem;\r\n        justify-content: center;\r\n      }\r\n    }\r\n\r\n    th {\r\n      border-right: 1px solid #a39485;\r\n    }\r\n\r\n    @media screen and (max-width: 600px) {\r\n      .btn_group button {\r\n        font-size: 0.65rem;\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useCallback, useState } from 'react';\r\nimport useSWR from 'swr';\r\nimport useSWRMutation from 'swr/mutation';\r\n\r\nimport useInput from '@hooks/useInput';\r\nimport { logInCheckFetcher } from '@utils/logInFetcher';\r\nimport { postUserInfoFetcher } from '@utils/userDataFetcher';\r\nimport { Button } from '@styles/Button';\r\nimport { InfoSection, InfoTable } from './styles';\r\n\r\nconst MyProfile = () => {\r\n  const { data: userInfo } = useSWR('/user/my', logInCheckFetcher, {\r\n    revalidateIfStale: false,\r\n    revalidateOnFocus: false,\r\n    revalidateOnReconnect: false,\r\n  });\r\n  const { trigger: postUserInfoTrigger } = useSWRMutation(\r\n    '/user/my',\r\n    postUserInfoFetcher,\r\n  );\r\n\r\n  const [profileState, setProfileState] = useState({\r\n    intro: false,\r\n    name: false,\r\n  });\r\n  const [introductionInput, setIntroductionInput, handleIntroInput] =\r\n    useInput('');\r\n  const [nameInput, setNameInput, handleNameInput] = useInput('');\r\n\r\n  const changeIntroBox = useCallback(() => {\r\n    setProfileState((prev) => {\r\n      return {\r\n        ...prev,\r\n        intro: true,\r\n      };\r\n    });\r\n  }, [profileState]);\r\n\r\n  const changeNameBox = useCallback(() => {\r\n    setProfileState((prev) => {\r\n      return {\r\n        ...prev,\r\n        name: true,\r\n      };\r\n    });\r\n  }, [profileState]);\r\n\r\n  const onClickPostIntro = useCallback(\r\n    (postTitle: string) => () => {\r\n      if (postTitle === 'profile') {\r\n        postUserInfoTrigger({ [postTitle]: introductionInput });\r\n      } else if (postTitle === 'name') {\r\n        postUserInfoTrigger({ [postTitle]: nameInput });\r\n      } else {\r\n        alert('잘못된 요청입니다.');\r\n      }\r\n    },\r\n    [introductionInput, nameInput],\r\n  );\r\n\r\n  return (\r\n    <InfoSection>\r\n      <InfoTable>\r\n        <colgroup>\r\n          <col width={'20%'} />\r\n          <col width={'50%'} />\r\n          <col width={'30%'} />\r\n        </colgroup>\r\n        <tbody>\r\n          <tr>\r\n            <th>이메일</th>\r\n            <td colSpan={2}>\r\n              <strong>{userInfo?.user_info.email}</strong>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <th>가입 유형</th>\r\n            <td>\r\n              <div>{userInfo?.user_info.profile}</div>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <th>이름</th>\r\n            {!profileState.name ? (\r\n              <>\r\n                <td>\r\n                  <div>{userInfo?.user_info.name}</div>\r\n                </td>\r\n                <td className=\"btn_group\">\r\n                  <Button type=\"button\" onClick={changeNameBox}>\r\n                    이름 변경\r\n                  </Button>\r\n                </td>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <td>\r\n                  <div>\r\n                    <label htmlFor=\"name_label\">\r\n                      이름 수정\r\n                      <div>\r\n                        <input\r\n                          type=\"text\"\r\n                          id=\"name_label\"\r\n                          onChange={handleNameInput}\r\n                          value={nameInput}\r\n                          placeholder=\"이름 입력\"\r\n                        />\r\n                      </div>\r\n                    </label>\r\n                  </div>\r\n                </td>\r\n                <td className=\"btn_group\">\r\n                  <Button type=\"button\" onClick={onClickPostIntro('name')}>\r\n                    완료\r\n                  </Button>\r\n                  <Button\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      setProfileState((prev) => {\r\n                        return {\r\n                          ...prev,\r\n                          name: false,\r\n                        };\r\n                      })\r\n                    }\r\n                  >\r\n                    취소\r\n                  </Button>\r\n                </td>\r\n              </>\r\n            )}\r\n          </tr>\r\n          <tr>\r\n            <th>비밀번호</th>\r\n            <td>\r\n              <strong>********</strong>\r\n            </td>\r\n            <td className=\"btn_group\">\r\n              <Button type=\"button\">비밀번호 변경</Button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </InfoTable>\r\n    </InfoSection>\r\n  );\r\n};\r\n\r\nexport default MyProfile;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Wrapper = styled.div`\r\n  width: 100%;\r\n  margin-top: 40px;\r\n\r\n  ul {\r\n    display: grid;\r\n    grid-template-columns: repeat(3, auto);\r\n    gap: 1rem;\r\n\r\n    & li > div {\r\n      position: relative;\r\n\r\n      padding-bottom: 100%;\r\n      border-radius: 12px;\r\n\r\n      overflow: hidden;\r\n    }\r\n\r\n    img {\r\n      position: absolute;\r\n\r\n      width: 100%;\r\n      height: 100%;\r\n\r\n      object-fit: cover;\r\n    }\r\n  }\r\n`;\r\n","import React, { memo } from 'react';\r\n\r\nimport ImageContentList from '@pages/ImageRoom/Components/ImageContentList';\r\nimport { CImageData } from '@typing/client';\r\nimport { Wrapper } from './styles';\r\n\r\ninterface Props {\r\n  imageList?: CImageData[];\r\n  observerRef?: React.MutableRefObject<null>;\r\n}\r\n\r\nconst MyPictures = ({ imageList, observerRef }: Props) => {\r\n  return !imageList ? (\r\n    <div>로딩중..</div>\r\n  ) : (\r\n    <Wrapper>\r\n      <ImageContentList ImageData={imageList} observerRef={observerRef} />\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default memo(MyPictures);\r\n","import styled from '@emotion/styled';\r\n\r\nexport const WrapperBox = styled.section`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  height: 100%;\r\n  box-sizing: border-box;\r\n\r\n  overflow-x: hidden;\r\n`;\r\n\r\nexport const ContentBox = styled.main`\r\n  box-sizing: border-box;\r\n\r\n  min-width: 400px;\r\n  padding: 0 2rem;\r\n\r\n  overflow: hidden;\r\n\r\n  h2,\r\n  ul {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n  li {\r\n    list-style: none;\r\n  }\r\n`;\r\n\r\nexport const ProfileBox = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  padding: 2rem 0 4rem 0;\r\n`;\r\n\r\nexport const EachRoomPictureList = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  margin-bottom: 40px;\r\n\r\n  a {\r\n    text-decoration: none;\r\n    color: black;\r\n    &:active {\r\n      color: black;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SubMenu = styled.div`\r\n  display: flex;\r\n\r\n  gap: 1rem;\r\n  font-size: 1.1rem;\r\n\r\n  a.menu_active {\r\n    border-top: 1px solid rgb(38, 38, 38);\r\n  }\r\n`;\r\n\r\nexport const ProfileImage = styled.div`\r\n  width: 100px;\r\n  height: 100px;\r\n  margin-right: 30px;\r\n`;\r\n\r\nexport const ProfileInfo = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  flex-basis: 50%;\r\n\r\n  gap: 1rem;\r\n\r\n  ul {\r\n    display: flex;\r\n    gap: 1rem;\r\n  }\r\n\r\n  @media screen and (max-width: 600px) {\r\n    ul {\r\n      flex-direction: column;\r\n    }\r\n  }\r\n`;\r\n","import React, { useEffect, useState } from 'react';\r\nimport useSWR from 'swr';\r\nimport useSWRMutation from 'swr/mutation';\r\n\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Routes, Route, useLocation } from 'react-router';\r\nimport { BiUserCircle } from 'react-icons/bi';\r\nimport { IconContext } from 'react-icons/lib';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\n\r\nimport { CImageData } from '@typing/client';\r\nimport useIntersect from '@hooks/useIntersect';\r\nimport AppLayout from '@layouts/AppLayout';\r\nimport {\r\n  getImageData,\r\n  getUserFriendList,\r\n  getUserImageLen,\r\n  getUserImageList,\r\n  getUserRoomListFetcher,\r\n} from '@utils/userDataFetcher';\r\n\r\nimport MyProfile from './Components/MyProfile';\r\nimport MyPictures from './Components/MyPictures';\r\nimport {\r\n  ContentBox,\r\n  EachRoomPictureList,\r\n  ProfileBox,\r\n  ProfileImage,\r\n  ProfileInfo,\r\n  SubMenu,\r\n  WrapperBox,\r\n} from './styles';\r\n\r\nconst MyPage = () => {\r\n  const { pathname } = useLocation();\r\n  const userId = sessionStorage.getItem('user_id');\r\n\r\n  const { data: roomlist } = useSWR(\r\n    `/user/${userId}/roomlist`,\r\n    getUserRoomListFetcher,\r\n    {\r\n      revalidateIfStale: false,\r\n      revalidateOnFocus: false,\r\n      revalidateOnReconnect: false,\r\n    },\r\n  );\r\n  const { data: friendList } = useSWR('friendlist', getUserFriendList, {\r\n    revalidateIfStale: false,\r\n    revalidateOnFocus: false,\r\n    revalidateOnReconnect: false,\r\n  });\r\n  const { data: userImageList, mutate: mutateUserImageList } = useSWR<\r\n    CImageData[]\r\n  >('/user/imageDataList', {\r\n    fallbackData: [],\r\n  });\r\n  const { data: allImageLen } = useSWR(\r\n    `/user/${userId}/imagelist-len`,\r\n    getUserImageLen,\r\n    {\r\n      revalidateIfStale: false,\r\n      revalidateOnFocus: false,\r\n      revalidateOnReconnect: false,\r\n    },\r\n  );\r\n  const { data: loginInfo } = useSWR('/user/my');\r\n\r\n  const {\r\n    data: requestImageList,\r\n    trigger: requestImageListInfo,\r\n    isMutating: requestImageLoading,\r\n  } = useSWRMutation(`/user/${userId}/imagelist`, getUserImageList);\r\n\r\n  const { trigger: imageDataTrigger, isMutating: imageDataLoading } =\r\n    useSWRMutation('/user/image-download', getImageData);\r\n\r\n  const [readStartNumber, setReadStartNumber] = useState(0);\r\n  const observerRef = useIntersect(\r\n    async (entry, observer) => {\r\n      observer.unobserve(entry.target);\r\n      if (\r\n        !requestImageLoading &&\r\n        !imageDataLoading &&\r\n        requestImageList?.loadDataLength === 12\r\n      ) {\r\n        requestImageListInfo(readStartNumber);\r\n      }\r\n    },\r\n    {\r\n      threshold: 0.5,\r\n    },\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (pathname !== '/my_page') return;\r\n    requestImageListInfo(readStartNumber);\r\n\r\n    return () => {\r\n      setReadStartNumber(0);\r\n      mutateUserImageList([]);\r\n    };\r\n  }, [pathname]);\r\n\r\n  useEffect(() => {\r\n    if (!requestImageList || requestImageLoading || !userImageList) return;\r\n\r\n    setReadStartNumber((prev) => prev + 12);\r\n    imageDataTrigger(requestImageList.imagelist).then((newImage) => {\r\n      if (newImage) mutateUserImageList([...userImageList, ...newImage]);\r\n    });\r\n  }, [requestImageList]);\r\n\r\n  return (\r\n    <AppLayout>\r\n      <WrapperBox>\r\n        <Scrollbars>\r\n          <ContentBox>\r\n            <ProfileBox>\r\n              <ProfileImage>\r\n                <IconContext.Provider\r\n                  value={{ size: '100%', style: { display: 'inline-block' } }}\r\n                >\r\n                  <BiUserCircle />\r\n                </IconContext.Provider>\r\n              </ProfileImage>\r\n              <ProfileInfo>\r\n                <div>\r\n                  <h2>{loginInfo.user_info.name}</h2>\r\n                </div>\r\n                <ul>\r\n                  <li>\r\n                    <div>\r\n                      게시물 <span>{allImageLen?.imagelist_len ?? 0}</span>\r\n                    </div>\r\n                  </li>\r\n                  <li>\r\n                    <div>\r\n                      등록된 방 <span>{roomlist?.length ?? 0}</span>\r\n                    </div>\r\n                  </li>\r\n                  <li>\r\n                    <div>\r\n                      친구수 <span>{friendList?.length ?? 0}</span>\r\n                    </div>\r\n                  </li>\r\n                </ul>\r\n              </ProfileInfo>\r\n            </ProfileBox>\r\n            <EachRoomPictureList>\r\n              <SubMenu>\r\n                <NavLink\r\n                  to={`/my_page`}\r\n                  className={({ isActive }) =>\r\n                    isActive ? 'menu_active' : undefined\r\n                  }\r\n                  end\r\n                >\r\n                  <div>사진첩</div>\r\n                </NavLink>\r\n                <NavLink\r\n                  to={`/my_page/my_profile`}\r\n                  className={({ isActive }) =>\r\n                    isActive ? 'menu_active' : undefined\r\n                  }\r\n                >\r\n                  <div>프로필</div>\r\n                </NavLink>\r\n              </SubMenu>\r\n              <Routes>\r\n                <Route\r\n                  path=\"/\"\r\n                  element={\r\n                    <MyPictures\r\n                      imageList={userImageList}\r\n                      observerRef={observerRef}\r\n                    />\r\n                  }\r\n                />\r\n                <Route path=\"my_profile\" element={<MyProfile />} />\r\n              </Routes>\r\n            </EachRoomPictureList>\r\n          </ContentBox>\r\n        </Scrollbars>\r\n      </WrapperBox>\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nexport default MyPage;\r\n"],"names":["onIntersect","options","ref","useRef","callback","useCallback","handler","invokedTime","timer","timeout","args","clearTimeout","window","setTimeout","Date","now","apply","Math","max","this","requestAnimationFrame","throttle","entries","observer","forEach","entry","isIntersecting","useEffect","current","IntersectionObserver","observe","disconnect","ContentBox","styled","ImageCard","InfoContainer","HoverBox","ImageInfo","ImageContent","data","index","thisArr","observerRef","currentPath","useLocation","pathname","roomId","useParams","mutate","useSWRConfig","mutateDetailImageInfo","useSWR","roomImageList","fetchRoomImage","revalidateIfStale","revalidateOnFocus","revalidateOnReconnect","deleteRoomImageId","roomImageDeleting","isLoading","userImageList","fetchUserImage","deleteUserImageId","userImageDeleting","useState","isHover","setIsHover","id","filteredList","filter","image","key","length","undefined","onMouseEnter","onMouseLeave","src","link","user_name","created_at","className","Button","type","onClick","e","stopPropagation","currentModalState","user_id","sessionStorage","getItem","alertArgKey","content","mutateKey","imageId","memo","ImageLayout","NotImageData","ImageContentList","ImageData","sectionName","map","value","size","style","display","maxWidth","InfoSection","InfoTable","userInfo","logInCheckFetcher","postUserInfoTrigger","useSWRMutation","postUserInfoFetcher","trigger","intro","name","profileState","setProfileState","useInput","introductionInput","nameInput","handleNameInput","changeNameBox","prev","onClickPostIntro","postTitle","alert","width","colSpan","user_info","email","profile","htmlFor","onChange","placeholder","Wrapper","MyPictures","imageList","WrapperBox","ProfileBox","EachRoomPictureList","SubMenu","ProfileImage","ProfileInfo","i","userId","roomlist","getUserRoomListFetcher","friendList","getUserFriendList","fallbackData","mutateUserImageList","allImageLen","getUserImageLen","loginInfo","getUserImageList","requestImageList","requestImageListInfo","requestImageLoading","isMutating","getImageData","imageDataTrigger","imageDataLoading","readStartNumber","setReadStartNumber","useIntersect","unobserve","target","loadDataLength","threshold","imagelist","then","newImage","AppLayout","imagelist_len","to","isActive","end","path","element"],"sourceRoot":""}