{"version":3,"file":"241.js","mappings":";8OAEaA,EAAUC,EAAAA,EAAAA,IAAU,ilBCDjC,knGAAAC,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,kkBAsEA,QA9DmB,WACjB,OAA2DC,EAAAA,EAAAA,IAEzD,aAAcC,EAAAA,GAAmB,CACjCC,mBAAmB,EACnBC,mBAAmB,EACnBC,uBAAuB,IALXC,EAAc,EAApBC,KAA8BC,EAAgB,EAAxBC,OAOtBC,GAAYC,EAAAA,EAAAA,GAAe,eAAgBC,EAAAA,IAA3CF,QAEFG,GAAqBC,EAAAA,EAAAA,cACzB,SAACC,GAA4B,mBAAK,8FAC1BL,EAAQK,GAAS,uBACjBP,IAAkB,0CACzB,GACD,IAGF,OACE,gBAACV,EAAO,KACN,6BACE,gCACE,uBAAKkB,KAAM,EAAGC,MAAO,CAAEC,MAAO,SAC9B,uBAAKF,KAAM,EAAGC,MAAO,CAAEC,MAAO,SAC9B,uBAAKF,KAAM,EAAGC,MAAO,CAAEC,MAAO,SAC9B,uBAAKF,KAAM,EAAGC,MAAO,CAAEC,MAAO,UAEhC,6BACE,0BACE,sBAAIC,MAAM,OAAK,MACf,sBAAIA,MAAM,OAAK,OACf,sBAAIA,MAAM,OAAK,SACf,sBAAIA,MAAM,OAAK,WAGnB,6BAC8B,KAA3Bb,aAAc,EAAdA,EAAgBc,QACfd,aAAc,EAAdA,EAAgBe,KAAI,SAACd,GAAiB,OACpC,sBAAIe,IAAKf,EAAKgB,IACZ,0BAAKhB,EAAKiB,MACV,0BAAKjB,EAAKkB,OACV,0BAAKlB,EAAKmB,SACV,0BACE,uBAAKC,UAAU,cACb,gBAACC,EAAA,EAAM,CAACC,KAAK,SAASC,QAASjB,EAAmBN,EAAKgB,KAAI,QAK5D,IAGP,0BACE,sBAAIQ,QAAS,GAAE,oBAO7B,iSCpEA,6pNAeA,QAdmB,eADnB,EACmB,GADnB,EACmB,UAAG,WAAOC,GAAW,0FAC/BC,EAAAA,GAAAA,IACA,WAAaD,GACjBE,MAAK,SAACC,GAIL,OARN,+CAKyBA,EAAI5B,KAAf6B,OACkBC,MAAM,EAAG,KANzC,qkBASI,IACCC,OAAM,SAACC,GACNC,QAAQC,MAAMF,EAChB,KAAE,0CAZN,+KAaC,gBAZkB,oKCAZ,IAAMzC,EAAUC,EAAAA,EAAAA,IAAU,o/BA+DpB2C,EAAW3C,EAAAA,EAAAA,IAAU,qCAIrB4C,EAAa5C,EAAAA,EAAAA,IAAU,qjBAiCvB6C,EAAe7C,EAAAA,EAAAA,IAAU,o+CCqDtC,QA7IkB,WAChB,IAAQU,GAAWoC,EAAAA,EAAAA,MAAXpC,OAC0C,KAAZqC,EAAAA,EAAAA,UAAS,IAAG,GAA3CC,EAAW,KAAEC,EAAc,KAEpBC,GAAuBhD,EAAAA,EAAAA,IAAO,sBAAD,OACnB8C,GACtBG,EACA,CACE9C,mBAAmB,EACnB+C,mBAAmB,EACnB9C,uBAAuB,EACvB+C,kBAAkB,IAPd7C,KAUS8C,GAA0B1C,EAAAA,EAAAA,GACzC,eACA2C,EAAAA,IAFM5C,QAKmD,KAAfoC,EAAAA,EAAAA,WAAS,GAAM,GAApDS,EAAc,KAAEC,EAAiB,KACmB,KAAvBV,EAAAA,EAAAA,YAAuB,GAApDW,EAAU,KAAEC,EAAa,KACwC,KAAZC,EAAAA,EAAAA,GAAS,IAAG,GAAjEC,EAAY,KAAEC,EAAe,KAAEC,EAAkB,MAExDC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAWC,YAAW,WAC1BjB,EAAeY,EACjB,GAAG,KACH,OAAO,kBAAMM,aAAaF,EAAS,CACrC,GAAG,CAACJ,IAEJ,IAAMO,GAAqBrD,EAAAA,EAAAA,cACzB,SAACsD,GACCA,EAAEC,iBACF,IAAMC,EAAgBrB,aAAkB,EAAlBA,EAAoBsB,MACxC,SAAChE,GAAI,OAAKA,EAAKkB,QAAUmC,CAAY,IAEvCF,EAAcY,EAChB,GACA,CAACV,EAAcb,EAAaE,IAGxBuB,GAAqB1D,EAAAA,EAAAA,cACzB,SAAC2D,GAAwC,OAAK,WAC5C,GAAIA,SAAAA,EAAiBlD,GAAI,OACvBsC,EAAqC,QAAtB,EAACY,EAAgBhD,aAAK,QAAI,IACzC+B,GAAkB,GAElB,IAAMc,EAAgBrB,aAAkB,EAAlBA,EAAoBsB,MACxC,SAAChE,GAAI,OAAKA,EAAKgB,KAAOkD,EAAgBlD,EAAE,IAE1CmC,EAAcY,EAChB,CACF,CAAC,GACD,CAACrB,IAGGyB,GAAmB5D,EAAAA,EAAAA,cACvB,SAACC,GAAiB,OAAK,WACrBN,EAAO,aAAc4C,EAAsBtC,GAC7C,CAAC,GACD,CAAC0C,IAGH,OACE,gBAAC,EAAO,KACN,gBAACf,EAAQ,KACP,wBAAMiC,SAAUR,GACd,uBAAKxC,UAAU,gBACb,yBAAOiD,QAAQ,gBAAc,UAC7B,yBACE/C,KAAK,OACLN,GAAG,eACHC,KAAK,SACLqD,aAAa,MACbC,YAAY,uBACZC,SAAUjB,EACVkB,QAAS,kBAAMxB,GAAkB,EAAK,EACtCyB,OAAQ,kBAAMzB,GAAkB,EAAM,EACtC0B,MAAOtB,KAGX,uBAAKjC,UAAU,cACb,gBAACC,EAAA,EAAM,CAACC,KAAK,UAAQ,QAGxB0B,GACC,gBAACZ,EAAU,KACT,0BACGM,GAAqD,KAA/BA,aAAkB,EAAlBA,EAAoB7B,QACzC6B,EAAmB5B,KAAI,SAACd,GAAiB,OACvC,sBACEe,IAAKf,EAAKgB,GACVI,UAAW,aACXwD,YAAaX,EAAmBjE,IAEhC,uBAAKoB,UAAU,uBACb,sCAAcpB,EAAKkB,OACnB,mCAAWlB,EAAKiB,OAEf,IAGP,0BACE,2BACE,iDAQd,gBAACoB,EAAY,KACVa,EACC,uBAAK9B,UAAU,qBACb,kCACA,uBAAKA,UAAU,iBACb,mCAAW8B,aAAU,EAAVA,EAAYjC,MACvB,oCAAYiC,aAAU,EAAVA,EAAYhC,MAAK,QAC7B,gBAACG,EAAA,EAAM,CAACC,KAAK,SAASC,QAAS4C,EAAiBjB,aAAU,EAAVA,EAAYlC,KAAI,aAMpE,uBAAKI,UAAU,aACb,gBAAC,cAAoB,CACnBuD,MAAO,CAAEE,KAAM,MAAOnE,MAAO,CAAEoE,QAAS,kBAExC,gBAAC,MAAa,OAEhB,uBAAK1D,UAAU,kBACb,+CAOd,kICvJO,IAAM7B,EAAUC,EAAAA,EAAAA,IAAU,sVA+BpBuF,EAASvF,EAAAA,EAAAA,OAAa,6IAYtBwF,EAAaxF,EAAAA,EAAAA,IAAU,gdA+BvByF,EAASzF,EAAAA,EAAAA,IAAU,goBAsCnB0F,EAAa1F,EAAAA,EAAAA,IAAU,oTCrDpC,SApDyB,WACvB,OACE,gBAAC2F,EAAA,EAAS,KACR,gBAAC,EAAO,KACN,gBAAC,KAAU,KACT,uBAAK/D,UAAU,mBACb,gBAAC2D,EAAM,KACL,2BACE,qCAGJ,gBAACC,EAAU,KACT,gBAACC,EAAM,KACL,0BACE,0BACE,gBAAC,KAAO,CACNG,GAAI,GACJhE,UAAW,YAAW,SAARiE,SACD,kBAAeC,CAAS,EAErCC,KAAG,EACHC,gBAAc,aAKlB,0BACE,gBAAC,KAAO,CACNJ,GAAI,SACJhE,UAAW,YAAW,SAARiE,SACD,kBAAeC,CAAS,GACpC,YAOT,gBAACJ,EAAU,KACT,gBAAC,KAAM,KACL,gBAAC,KAAK,CAACO,KAAK,IAAIC,QAAS,gBAAC,EAAU,QACpC,gBAAC,KAAK,CAACD,KAAK,UAAUC,QAAS,gBAAC,EAAS,cAS3D","sources":["webpack://imageus/./pages/PeopleManagement/Components/FriendList/styles.tsx","webpack://imageus/./pages/PeopleManagement/Components/FriendList/index.tsx","webpack://imageus/./utils/searchFetcher.ts","webpack://imageus/./pages/PeopleManagement/Components/SearchBox/styles.tsx","webpack://imageus/./pages/PeopleManagement/Components/SearchBox/index.tsx","webpack://imageus/./pages/PeopleManagement/styles.tsx","webpack://imageus/./pages/PeopleManagement/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Wrapper = styled.div`\r\n  table tr th,\r\n  table tbody td {\r\n    text-align: center;\r\n  }\r\n\r\n  table tbody tr {\r\n    height: 100px;\r\n  }\r\n\r\n  @media screen and (max-width: 850px) {\r\n    .delete_btn button {\r\n      width: 53px;\r\n      font-size: 0.65rem;\r\n    }\r\n  }\r\n`;\r\n","import React, { useCallback } from 'react';\r\nimport useSWR from 'swr';\r\nimport useSWRMutation from 'swr/mutation';\r\n\r\nimport { DFriendData } from '@typing/db';\r\nimport { Button } from '@styles/Button';\r\nimport { deleteUserFriend, getUserFriendList } from '@utils/userDataFetcher';\r\nimport { Wrapper } from './styles';\r\n\r\nconst FriendList = () => {\r\n  const { data: friendListData, mutate: friendListMutate } = useSWR<\r\n    DFriendData[]\r\n  >('friendlist', getUserFriendList, {\r\n    revalidateIfStale: false,\r\n    revalidateOnFocus: false,\r\n    revalidateOnReconnect: false,\r\n  });\r\n  const { trigger } = useSWRMutation('deleteFriend', deleteUserFriend);\r\n\r\n  const handleDeleteFriend = useCallback(\r\n    (friendId: number | undefined) => async () => {\r\n      await trigger(friendId);\r\n      await friendListMutate();\r\n    },\r\n    [],\r\n  );\r\n\r\n  return (\r\n    <Wrapper>\r\n      <table>\r\n        <colgroup>\r\n          <col span={1} style={{ width: '15%' }} />\r\n          <col span={1} style={{ width: '30%' }} />\r\n          <col span={1} style={{ width: '40%' }} />\r\n          <col span={1} style={{ width: '15%' }} />\r\n        </colgroup>\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">이름</th>\r\n            <th scope=\"col\">이메일</th>\r\n            <th scope=\"col\">가입 유형</th>\r\n            <th scope=\"col\">목록 삭제</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {friendListData?.length !== 0 ? (\r\n            friendListData?.map((data: DFriendData) => (\r\n              <tr key={data.id}>\r\n                <td>{data.name}</td>\r\n                <td>{data.email}</td>\r\n                <td>{data.profile}</td>\r\n                <td>\r\n                  <div className=\"delete_btn\">\r\n                    <Button type=\"button\" onClick={handleDeleteFriend(data.id)}>\r\n                      삭제\r\n                    </Button>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            ))\r\n          ) : (\r\n            <tr>\r\n              <td colSpan={4}>등록된 친구가 없습니다.</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default FriendList;\r\n","import axios from 'axios';\r\n\r\nconst searchFetcher = async (url: string) => {\r\n  return axios\r\n    .get('/backapi' + url)\r\n    .then((res) => {\r\n      const { result } = res.data;\r\n      const searchData = result.slice(0, 5);\r\n\r\n      return [...searchData];\r\n    })\r\n    .catch((err) => {\r\n      console.error(err);\r\n    });\r\n};\r\n\r\nexport default searchFetcher;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 40px 0;\r\n  box-sizing: border-box;\r\n\r\n  p {\r\n    margin: 0;\r\n  }\r\n\r\n  form {\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    text-align: left;\r\n\r\n    height: 60px;\r\n    padding: 0 20px;\r\n    border-radius: 30px;\r\n\r\n    background: #fff;\r\n    box-shadow: 0px 0px 5px 0px rgb(0 0 0 / 19%);\r\n\r\n    .search_btn {\r\n      padding-left: 10px;\r\n\r\n      button {\r\n        width: 60px;\r\n        font-size: 0.5rem;\r\n      }\r\n    }\r\n  }\r\n\r\n  form .search_input {\r\n    width: 100%;\r\n    margin-left: 10px;\r\n\r\n    label {\r\n      position: absolute;\r\n      display: block;\r\n      z-index: 100;\r\n\r\n      font-size: 12px;\r\n      font-weight: bold;\r\n    }\r\n    input {\r\n      width: 100%;\r\n      border: 0;\r\n      padding: 20px 0 0;\r\n    }\r\n    input:focus {\r\n      outline: none;\r\n      &::placeholder {\r\n        color: transparent;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const InputBox = styled.div`\r\n  margin: 0 40px;\r\n`;\r\n\r\nexport const PreviewBox = styled.div`\r\n  position: absolute;\r\n\r\n  width: calc(100% - 180px);\r\n  margin-left: 20px;\r\n\r\n  border-radius: 5px;\r\n  box-shadow: rgb(0 0 0 / 30%) 0px 8px 12px 0px;\r\n  background-color: white;\r\n\r\n  ul li {\r\n    padding: 10px 0;\r\n\r\n    .search_result_space {\r\n      display: flex;\r\n      flex-direction: column;\r\n      justify-content: center;\r\n      align-items: center;\r\n\r\n      span:first-of-type {\r\n        margin-bottom: 5px;\r\n      }\r\n    }\r\n  }\r\n\r\n  ul li.preview_li {\r\n    &:hover {\r\n      background-color: #f7f7f9;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SearchResult = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex: 1 0 auto;\r\n\r\n  width: 100%;\r\n  margin-top: 30px;\r\n\r\n  .search_result_box {\r\n    align-self: flex-start;\r\n\r\n    ul {\r\n      margin-top: 20px;\r\n    }\r\n  }\r\n\r\n  .search_result {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    gap: 1.5rem;\r\n    margin-top: 15px;\r\n\r\n    button {\r\n      font-size: 0.8rem;\r\n    }\r\n  }\r\n\r\n  .not_found {\r\n    text-align: center;\r\n\r\n    .not_found_text {\r\n      margin-top: 20px;\r\n    }\r\n  }\r\n`;\r\n","import React, { FormEvent, useCallback, useEffect, useState } from 'react';\r\nimport useSWR, { useSWRConfig } from 'swr';\r\nimport useSWRMutation from 'swr/mutation';\r\n\r\nimport { VscSearchStop } from 'react-icons/vsc';\r\nimport { IconContext } from 'react-icons/lib';\r\n\r\nimport { DFriendData } from '@typing/db';\r\nimport useInput from '@hooks/useInput';\r\nimport searchFetcher from '@utils/searchFetcher';\r\nimport { postNewFriend } from '@utils/userDataFetcher';\r\nimport { Button } from '@styles/Button';\r\nimport { InputBox, PreviewBox, SearchResult, Wrapper } from './styles';\r\n\r\nconst SearchBox = () => {\r\n  const { mutate } = useSWRConfig();\r\n  const [queryParams, setQueryParams] = useState('');\r\n\r\n  const { data: prevSearchDataList } = useSWR(\r\n    `/user/search?email=${queryParams}`,\r\n    searchFetcher,\r\n    {\r\n      revalidateOnFocus: false,\r\n      revalidateOnMount: false,\r\n      revalidateOnReconnect: false,\r\n      keepPreviousData: true,\r\n    },\r\n  );\r\n  const { trigger: registerFriendTrigger } = useSWRMutation(\r\n    '/user/friend',\r\n    postNewFriend,\r\n  );\r\n\r\n  const [focusSearchBox, setFocusSearchBox] = useState(false);\r\n  const [searchData, setSearchData] = useState<DFriendData>();\r\n  const [tmpInputData, setTmpInputData, handleTmpInputData] = useInput('');\r\n\r\n  useEffect(() => {\r\n    const debounce = setTimeout(() => {\r\n      setQueryParams(tmpInputData);\r\n    }, 300);\r\n    return () => clearTimeout(debounce);\r\n  }, [tmpInputData]);\r\n\r\n  const onSubmitSearchData = useCallback(\r\n    (e: FormEvent<HTMLFormElement>) => {\r\n      e.preventDefault();\r\n      const clickItemData = prevSearchDataList?.find(\r\n        (data) => data.email === tmpInputData,\r\n      );\r\n      setSearchData(clickItemData);\r\n    },\r\n    [tmpInputData, queryParams, prevSearchDataList],\r\n  );\r\n\r\n  const onClickPreviewItem = useCallback(\r\n    (searchEmailData: DFriendData | undefined) => () => {\r\n      if (searchEmailData?.id) {\r\n        setTmpInputData(searchEmailData.email ?? '');\r\n        setFocusSearchBox(false);\r\n\r\n        const clickItemData = prevSearchDataList?.find(\r\n          (data) => data.id === searchEmailData.id,\r\n        );\r\n        setSearchData(clickItemData);\r\n      }\r\n    },\r\n    [prevSearchDataList],\r\n  );\r\n\r\n  const onClickAddFriend = useCallback(\r\n    (friendId?: number) => () => {\r\n      mutate('friendlist', registerFriendTrigger(friendId));\r\n    },\r\n    [searchData],\r\n  );\r\n\r\n  return (\r\n    <Wrapper>\r\n      <InputBox>\r\n        <form onSubmit={onSubmitSearchData}>\r\n          <div className=\"search_input\">\r\n            <label htmlFor=\"searchFriend\">Search</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"searchFriend\"\r\n              name=\"search\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"검색할 유저의 이메일을 입력하세요..\"\r\n              onChange={handleTmpInputData}\r\n              onFocus={() => setFocusSearchBox(true)}\r\n              onBlur={() => setFocusSearchBox(false)}\r\n              value={tmpInputData}\r\n            />\r\n          </div>\r\n          <div className=\"search_btn\">\r\n            <Button type=\"submit\">검색</Button>\r\n          </div>\r\n        </form>\r\n        {focusSearchBox && (\r\n          <PreviewBox>\r\n            <ul>\r\n              {prevSearchDataList && prevSearchDataList?.length !== 0 ? (\r\n                prevSearchDataList.map((data: DFriendData) => (\r\n                  <li\r\n                    key={data.id}\r\n                    className={'preview_li'}\r\n                    onMouseDown={onClickPreviewItem(data)}\r\n                  >\r\n                    <div className=\"search_result_space\">\r\n                      <span>email: {data.email}</span>\r\n                      <span>이름: {data.name}</span>\r\n                    </div>\r\n                  </li>\r\n                ))\r\n              ) : (\r\n                <li>\r\n                  <div>\r\n                    <span>검색 결과가 없습니다.</span>\r\n                  </div>\r\n                </li>\r\n              )}\r\n            </ul>\r\n          </PreviewBox>\r\n        )}\r\n      </InputBox>\r\n      <SearchResult>\r\n        {searchData ? (\r\n          <div className=\"search_result_box\">\r\n            <h2>검색결과</h2>\r\n            <div className=\"search_result\">\r\n              <span>이름: {searchData?.name}</span>\r\n              <span>이메일: {searchData?.email}입니다.</span>\r\n              <Button type=\"button\" onClick={onClickAddFriend(searchData?.id)}>\r\n                친구 추가하기\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"not_found\">\r\n            <IconContext.Provider\r\n              value={{ size: '30%', style: { display: 'inline-block' } }}\r\n            >\r\n              <VscSearchStop />\r\n            </IconContext.Provider>\r\n            <div className=\"not_found_text\">\r\n              <span>검색 결과가 없습니다.</span>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </SearchResult>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Wrapper = styled.div`\r\n  height: 100%;\r\n\r\n  h1,\r\n  h2,\r\n  ul {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n\r\n  li {\r\n    list-style: none;\r\n  }\r\n\r\n  a {\r\n    color: black;\r\n    text-decoration: none;\r\n\r\n    &:active {\r\n      color: black;\r\n    }\r\n  }\r\n\r\n  .content_wrapper {\r\n    position: relative;\r\n    right: 3px;\r\n\r\n    padding-bottom: 40px;\r\n  }\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  div {\r\n    padding: 28px 0;\r\n    height: 105px;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  h1 {\r\n    margin-left: 2em;\r\n  }\r\n`;\r\n\r\nexport const ContentBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  width: fit-content;\r\n  margin: auto;\r\n\r\n  table {\r\n    width: 100%;\r\n    position: relative;\r\n    padding-bottom: 0;\r\n    border: none;\r\n    border-collapse: collapse;\r\n\r\n    td,\r\n    th {\r\n      text-align: start;\r\n      padding: 16px;\r\n    }\r\n\r\n    th {\r\n      border-bottom: 1px solid #a39485;\r\n    }\r\n\r\n    tr td {\r\n      border-bottom: 1px solid #e5e5e5;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const TabBox = styled.div`\r\n  position: relative;\r\n  top: 18px;\r\n\r\n  width: 100%;\r\n  padding-left: 50px;\r\n  box-sizing: border-box;\r\n\r\n  ul {\r\n    display: inline-flex;\r\n    gap: 1rem;\r\n\r\n    li {\r\n      text-align: center;\r\n      line-height: 45px;\r\n    }\r\n\r\n    a {\r\n      display: block;\r\n\r\n      width: 100px;\r\n      height: 60px;\r\n      border-radius: 15px;\r\n\r\n      color: #111;\r\n      box-sizing: border-box;\r\n      background-color: #ccc;\r\n      box-shadow: -2px 2px 2px 2px rgb(0 0 0 / 40%);\r\n    }\r\n\r\n    a.active_tab {\r\n      color: black;\r\n      background-color: white;\r\n      box-shadow: -2px 2px 2px 2px rgb(0 0 0 / 40%);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const TabContent = styled.div`\r\n  position: relative;\r\n\r\n  width: calc(100vw - 20px);\r\n  min-width: 560px;\r\n  border-top: 1px solid #a39485;\r\n\r\n  background-color: white;\r\n\r\n  @media screen and (min-width: 850px) {\r\n    max-width: 800px;\r\n    border-radius: 15px;\r\n    box-shadow: -2px 2px 2px 2px rgb(0 0 0 / 40%);\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport { NavLink, Route, Routes } from 'react-router-dom';\r\n\r\nimport AppLayout from '@layouts/AppLayout';\r\nimport FriendList from './Components/FriendList';\r\nimport SearchBox from './Components/SearchBox';\r\nimport { ContentBox, Header, TabBox, TabContent, Wrapper } from './styles';\r\n\r\nconst PeopleManagement = () => {\r\n  return (\r\n    <AppLayout>\r\n      <Wrapper>\r\n        <Scrollbars>\r\n          <div className=\"content_wrapper\">\r\n            <Header>\r\n              <div>\r\n                <h1>친구 관리</h1>\r\n              </div>\r\n            </Header>\r\n            <ContentBox>\r\n              <TabBox>\r\n                <ul>\r\n                  <li>\r\n                    <NavLink\r\n                      to={''}\r\n                      className={({ isActive }) =>\r\n                        isActive ? 'active_tab' : undefined\r\n                      }\r\n                      end\r\n                      defaultChecked\r\n                    >\r\n                      친구 목록\r\n                    </NavLink>\r\n                  </li>\r\n                  <li>\r\n                    <NavLink\r\n                      to={'search'}\r\n                      className={({ isActive }) =>\r\n                        isActive ? 'active_tab' : undefined\r\n                      }\r\n                    >\r\n                      유저 검색\r\n                    </NavLink>\r\n                  </li>\r\n                </ul>\r\n              </TabBox>\r\n              <TabContent>\r\n                <Routes>\r\n                  <Route path=\"/\" element={<FriendList />} />\r\n                  <Route path=\"/search\" element={<SearchBox />} />\r\n                </Routes>\r\n              </TabContent>\r\n            </ContentBox>\r\n          </div>\r\n        </Scrollbars>\r\n      </Wrapper>\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nexport default PeopleManagement;\r\n"],"names":["Wrapper","styled","i","useSWR","getUserFriendList","revalidateIfStale","revalidateOnFocus","revalidateOnReconnect","friendListData","data","friendListMutate","mutate","trigger","useSWRMutation","deleteUserFriend","handleDeleteFriend","useCallback","friendId","span","style","width","scope","length","map","key","id","name","email","profile","className","Button","type","onClick","colSpan","url","axios","then","res","result","slice","catch","err","console","error","InputBox","PreviewBox","SearchResult","useSWRConfig","useState","queryParams","setQueryParams","prevSearchDataList","searchFetcher","revalidateOnMount","keepPreviousData","registerFriendTrigger","postNewFriend","focusSearchBox","setFocusSearchBox","searchData","setSearchData","useInput","tmpInputData","setTmpInputData","handleTmpInputData","useEffect","debounce","setTimeout","clearTimeout","onSubmitSearchData","e","preventDefault","clickItemData","find","onClickPreviewItem","searchEmailData","onClickAddFriend","onSubmit","htmlFor","autoComplete","placeholder","onChange","onFocus","onBlur","value","onMouseDown","size","display","Header","ContentBox","TabBox","TabContent","AppLayout","to","isActive","undefined","end","defaultChecked","path","element"],"sourceRoot":""}