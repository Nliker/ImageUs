{"version":3,"file":"648.js","mappings":"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","sources":["webpack://imageus/./utils/getToken.ts","webpack://imageus/./utils/logInFetcher.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport const getToken = async () => {\r\n  try {\r\n    const currentTimeDate = new Date();\r\n\r\n    const accessTokenExpireTime = sessionStorage.getItem(\r\n      'access_token_expire_time',\r\n    );\r\n    const refreshTokenExpireTime = sessionStorage.getItem(\r\n      'refresh_token_expire_time',\r\n    );\r\n\r\n    if (!accessTokenExpireTime || !refreshTokenExpireTime) {\r\n      throw new Error();\r\n    }\r\n\r\n    const accessTokenExpireTimeDate = new Date(accessTokenExpireTime);\r\n    const accessTokenDiffTime =\r\n      accessTokenExpireTimeDate.getTime() - currentTimeDate.getTime();\r\n\r\n    const refreshTokenExpireTimeDate = new Date(refreshTokenExpireTime);\r\n    const refreshTokenDiffTime =\r\n      refreshTokenExpireTimeDate.getTime() - currentTimeDate.getTime();\r\n\r\n    if (accessTokenDiffTime >= 30000) {\r\n      return { token: sessionStorage.getItem('access_token'), message: '' };\r\n    } else if (refreshTokenDiffTime >= 30000) {\r\n      const userId = sessionStorage.getItem('user_id');\r\n      const response = await axios.post(`/backapi/user/${userId}/refresh`, {\r\n        refresh_token: sessionStorage.getItem('refresh_token'),\r\n      });\r\n      const { access_token, access_token_expire_time, user_id } = response.data;\r\n      sessionStorage.setItem('access_token', access_token);\r\n      sessionStorage.setItem(\r\n        'access_token_expire_time',\r\n        access_token_expire_time,\r\n      );\r\n      sessionStorage.setItem('user_id', user_id);\r\n\r\n      return { token: access_token, message: '' };\r\n    } else {\r\n      sessionStorage.clear();\r\n      return {\r\n        token: null,\r\n        message: '장시간 요청이 없어서 로그아웃되었습니다..',\r\n      };\r\n    }\r\n  } catch (err) {\r\n    return { token: null, message: '로그인 갱신에 실패했습니다..' };\r\n  }\r\n};\r\n","import axios, { AxiosError } from 'axios';\r\nimport { getToken } from './getToken';\r\n\r\nconst logInCheckFetcher = async (url: string) => {\r\n  try {\r\n    console.log('call check');\r\n    const { token } = await getToken();\r\n    if (!token) {\r\n      throw new Error();\r\n    }\r\n\r\n    const response = await axios.get('/backapi' + url, {\r\n      headers: {\r\n        Authorization: token,\r\n      },\r\n    });\r\n    const { user_info } = response.data;\r\n\r\n    return { logInState: true, user_info };\r\n  } catch (err) {\r\n    return { logInState: false };\r\n  }\r\n};\r\n\r\nconst logInRequestFetcher = async (\r\n  url: string,\r\n  { arg }: { arg: { email: string; password: string } },\r\n) => {\r\n  try {\r\n    const response = await axios.post('/backapi' + url, {\r\n      email: arg.email,\r\n      password: arg.password,\r\n    });\r\n    sessionStorage.setItem('access_token', response.data.access_token);\r\n    sessionStorage.setItem(\r\n      'access_token_expire_time',\r\n      response.data.access_token_expire_time,\r\n    );\r\n    sessionStorage.setItem('refresh_token', response.data.refresh_token);\r\n    sessionStorage.setItem(\r\n      'refresh_token_expire_time',\r\n      response.data.refresh_token_expire_time,\r\n    );\r\n    sessionStorage.setItem('user_id', response.data.user_id);\r\n\r\n    return true;\r\n  } catch (err) {\r\n    if (\r\n      err instanceof AxiosError &&\r\n      (err.response?.status === 404 || err.response?.status === 401)\r\n    ) {\r\n      alert(err.response.data.message);\r\n    } else {\r\n      alert('로그인 요청에 실패했습니다..');\r\n    }\r\n    return false;\r\n  }\r\n};\r\n\r\nconst socialLoginFetcher = async ([url, coperation, code]: [\r\n  string,\r\n  string,\r\n  string,\r\n]) => {\r\n  try {\r\n    const response = await axios.get(\r\n      '/backapi' + `${url}?coperation=${coperation}&code=${code}`,\r\n    );\r\n\r\n    const { access_token, user_id } = response.data;\r\n    sessionStorage.setItem('access_token', access_token);\r\n    sessionStorage.setItem(\r\n      'access_token_expire_time',\r\n      response.data.access_token_expire_time,\r\n    );\r\n    sessionStorage.setItem('refresh_token', response.data.refresh_token);\r\n    sessionStorage.setItem(\r\n      'refresh_token_expire_time',\r\n      response.data.refresh_token_expire_time,\r\n    );\r\n    sessionStorage.setItem('user_id', user_id);\r\n\r\n    return { result: 'success' };\r\n  } catch (err) {\r\n    alert('로그인 요청에 실패했습니다..');\r\n    return { result: 'fail' };\r\n  }\r\n};\r\n\r\nexport { logInCheckFetcher, logInRequestFetcher, socialLoginFetcher };\r\n"],"names":["getToken","currentTimeDate","Date","accessTokenExpireTime","sessionStorage","getItem","refreshTokenExpireTime","Error","accessTokenExpireTimeDate","accessTokenDiffTime","getTime","refreshTokenExpireTimeDate","refreshTokenDiffTime","token","message","userId","axios","refresh_token","response","data","access_token","access_token_expire_time","user_id","setItem","clear","i","logInCheckFetcher","url","console","log","headers","Authorization","user_info","logInState","logInRequestFetcher","arg","email","password","refresh_token_expire_time","AxiosError","status","alert","socialLoginFetcher","coperation","code","result"],"sourceRoot":""}