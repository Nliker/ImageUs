{"version":3,"file":"898.js","mappings":"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","sources":["webpack://imageus/./components/UserFormBox/styles.tsx","webpack://imageus/./components/UserFormBox/index.tsx","webpack://imageus/./hooks/useInput.ts","webpack://imageus/./pages/SignUp/styles.tsx","webpack://imageus/./pages/SignUp/index.tsx","webpack://imageus/./styles/Button/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Wrapper = styled.div`\r\n  @media screen and (min-width: 601px) {\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    min-height: 100vh;\r\n\r\n    &:before,\r\n    &:after {\r\n      display: block;\r\n      flex-grow: 1;\r\n\r\n      height: 18px;\r\n      box-sizing: border-box;\r\n\r\n      content: '';\r\n    }\r\n  }\r\n`;\r\n\r\nexport const OuterContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n  text-align: center;\r\n\r\n  padding: 24px 24px 36px;\r\n\r\n  @media screen and (min-width: 450px) {\r\n    padding: 48px 40px 36px;\r\n  }\r\n\r\n  @media screen and (min-width: 601px) {\r\n    display: block;\r\n\r\n    width: 450px;\r\n    margin: 0 auto;\r\n\r\n    border: 1px solid #dadce0;\r\n    border-radius: 8px;\r\n  }\r\n`;\r\n\r\nexport const InnerContainer = styled.div`\r\n  padding-top: 30px;\r\n`;\r\n","import React from 'react';\r\nimport { InnerContainer, OuterContainer, Wrapper } from './styles';\r\n\r\ninterface InputBoxProps {\r\n  children?: React.ReactNode;\r\n  pageName?: string;\r\n}\r\n\r\nconst UserFormBox = ({ children, pageName }: InputBoxProps) => {\r\n  return (\r\n    <Wrapper>\r\n      <OuterContainer>\r\n        <h1>{pageName}</h1>\r\n        <InnerContainer>{children}</InnerContainer>\r\n      </OuterContainer>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default UserFormBox;\r\n","import { Dispatch, SetStateAction, useCallback, useState } from \"react\"\r\n\r\nconst useInput = (initialValue: string): [string, Dispatch<SetStateAction<string>>, (e: React.ChangeEvent<HTMLInputElement>) => void] => {\r\n    const [value, setValue] = useState(initialValue);\r\n    const onChangeForm = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.target.value);\r\n    }, []);\r\n    return [value, setValue, onChangeForm];\r\n};\r\n\r\nexport default useInput;","import styled from '@emotion/styled';\r\n\r\nexport const InputContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  & > div:not(:first-of-type) {\r\n    padding-top: 24px;\r\n  }\r\n\r\n  .input_box {\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  height: 56px;\r\n  margin: 1px 1px 0 1px;\r\n  padding: 13px 15px;\r\n  box-sizing: border-box;\r\n\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  font-size: 16px;\r\n  box-shadow: 0 0 3px #eee;\r\n  color: #202124;\r\n`;\r\n\r\nexport const NameBox = styled.div`\r\n  text-align: left;\r\n`;\r\n\r\nexport const EmailBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: left;\r\n\r\n  height: 130px;\r\n\r\n  input {\r\n    width: 100%;\r\n  }\r\n\r\n  .email_err_message {\r\n    margin-bottom: 10px;\r\n\r\n    button {\r\n      width: fit-content;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const RequestAuthBox = styled.div`\r\n  display: flex;\r\n\r\n  gap: 1rem;\r\n\r\n  input {\r\n    flex: 5;\r\n\r\n    height: 28px;\r\n  }\r\n\r\n  button {\r\n    flex: 1;\r\n  }\r\n`;\r\n\r\nexport const PasswordBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  width: 100%;\r\n  gap: 1rem;\r\n\r\n  .wrap_password_input {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    .input_box {\r\n      display: flex;\r\n      gap: 1rem;\r\n\r\n      input {\r\n        flex: 1;\r\n\r\n        width: 100%;\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const PasswordShowCheckBox = styled.div`\r\n  width: fit-content;\r\n  text-align: left;\r\n\r\n  font-size: 17px;\r\n\r\n  cursor: pointer;\r\n\r\n  input {\r\n    width: auto;\r\n    height: auto;\r\n  }\r\n`;\r\n\r\nexport const SubmitBox = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  margin-top: 20px;\r\n\r\n  .login_link {\r\n    line-height: 1.38;\r\n    letter-spacing: -0.3px;\r\n    font-weight: 400;\r\n\r\n    color: #616568;\r\n    border-bottom: 1px solid #858a8d;\r\n    text-decoration: none;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const ErrorText = styled.div`\r\n  text-align: left;\r\n\r\n  span {\r\n    margin: 0 0 0 30px;\r\n\r\n    color: #d93025;\r\n  }\r\n`;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios, { AxiosError } from 'axios';\r\n\r\nimport UserFormBox from '@components/UserFormBox';\r\nimport useInput from '@hooks/useInput';\r\nimport { Button } from '@styles/Button';\r\nimport {\r\n  ErrorText,\r\n  InputContainer,\r\n  PasswordShowCheckBox,\r\n  SubmitBox,\r\n  Input,\r\n  PasswordBox,\r\n  NameBox,\r\n  EmailBox,\r\n  RequestAuthBox,\r\n} from './styles';\r\n\r\ninterface ErrorInfo {\r\n  name: { hasError: boolean; errorMessage: string };\r\n  email: { hasError: boolean; errorMessage: string; emailAuth: boolean };\r\n  password: { hasError: boolean; errorMessage: string };\r\n}\r\n\r\nconst SignUp = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const [checked, setChecked] = useState<boolean>(false);\r\n  const [errorInfo, setErrorInfo] = useState<ErrorInfo>({\r\n    name: { hasError: true, errorMessage: '이름을 입력해주세요.' },\r\n    email: {\r\n      hasError: true,\r\n      errorMessage: '이메일을 입력해주세요.',\r\n      emailAuth: false,\r\n    },\r\n    password: { hasError: true, errorMessage: '비밀번호를 입력해주세요.' },\r\n  });\r\n  const [isRequestingAuth, setRequestingAuth] = useState(false);\r\n  const [name, setName, nameHandler] = useInput('');\r\n  const [email, setEmail, emailHandler] = useInput('');\r\n  const [emailAuth, setEmailAuth, emailAuthHandler] = useInput('');\r\n  const [password, setPassword, passwordHandler] = useInput('');\r\n  const [passwordCheck, setPasswordCheck, passwordCheckHandler] = useInput('');\r\n  const emailRegex = new RegExp(\r\n    \"([!#-'*+/-9=?A-Z^-~-]+(.[!#-'*+/-9=?A-Z^-~-]+)*|\\\"([]!#-[^-~ \\t]|(\\\\[\\t -~]))+\\\")@([!#-'*+/-9=?A-Z^-~-]+(.[!#-'*+/-9=?A-Z^-~-]+)*|[[\\t -Z^-~]*])\",\r\n  );\r\n  const [count, setCount] = useState(60);\r\n  const [timeLimitId, setTimeLimitId] = useState<NodeJS.Timeout | null>();\r\n\r\n  useEffect(() => {\r\n    if (!name) {\r\n      setErrorInfo((prev) => ({\r\n        ...prev,\r\n        name: { hasError: true, errorMessage: '이름을 입력해주세요.' },\r\n      }));\r\n    } else {\r\n      setErrorInfo((prev) => ({\r\n        ...prev,\r\n        name: { hasError: false, errorMessage: '잘 입력하셨습니다!' },\r\n      }));\r\n    }\r\n  }, [name]);\r\n\r\n  useEffect(() => {\r\n    if (isRequestingAuth) return;\r\n\r\n    if (!email) {\r\n      setErrorInfo((prev) => ({\r\n        ...prev,\r\n        email: {\r\n          hasError: true,\r\n          errorMessage: '이메일을 입력해주세요.',\r\n          emailAuth: false,\r\n        },\r\n      }));\r\n    } else if (!emailRegex.test(email)) {\r\n      setErrorInfo((prev) => ({\r\n        ...prev,\r\n        email: {\r\n          hasError: true,\r\n          errorMessage: '이메일 형식에 맞지 않습니다.',\r\n          emailAuth: false,\r\n        },\r\n      }));\r\n    } else {\r\n      setErrorInfo((prev) => ({\r\n        ...prev,\r\n        email: {\r\n          hasError: true,\r\n          errorMessage: '인증 요청버튼을 클릭하세요.',\r\n          emailAuth: true,\r\n        },\r\n      }));\r\n    }\r\n  }, [email]);\r\n\r\n  useEffect(() => {\r\n    if (!password) {\r\n      setErrorInfo((prev) => ({\r\n        ...prev,\r\n        password: { hasError: true, errorMessage: '비밀번호를 입력해주세요.' },\r\n      }));\r\n      return;\r\n    } else if (password.length < 8) {\r\n      setErrorInfo((prev) => ({\r\n        ...prev,\r\n        password: {\r\n          hasError: true,\r\n          errorMessage: '비밀번호는 8자리 이상입니다.',\r\n        },\r\n      }));\r\n      return;\r\n    } else if (password !== passwordCheck) {\r\n      setErrorInfo((prev) => ({\r\n        ...prev,\r\n        password: {\r\n          hasError: true,\r\n          errorMessage: '비밀번호가 일치하지 않습니다.',\r\n        },\r\n      }));\r\n    } else {\r\n      setErrorInfo((prev) => ({\r\n        ...prev,\r\n        password: { hasError: false, errorMessage: '잘 입력하셨습니다!' },\r\n      }));\r\n    }\r\n  }, [password, passwordCheck]);\r\n\r\n  useEffect(() => {\r\n    if (!timeLimitId) return;\r\n    if (count <= 0) {\r\n      clearInterval(timeLimitId);\r\n      setTimeLimitId(null);\r\n      setCount(60);\r\n      setEmailAuth('');\r\n      setErrorInfo((prev) => ({\r\n        ...prev,\r\n        email: {\r\n          hasError: true,\r\n          errorMessage: '만료되었습니다..다시 요청해주세요!',\r\n          emailAuth: true,\r\n        },\r\n      }));\r\n      setRequestingAuth(false);\r\n    }\r\n  }, [timeLimitId, count]);\r\n\r\n  const countTimeLimit = () => {\r\n    if (timeLimitId) return;\r\n    const Id = setInterval(() => {\r\n      setCount((prev) => prev - 1);\r\n    }, 1000);\r\n    setTimeLimitId(Id);\r\n  };\r\n\r\n  const requestEmailAuthNum = async () => {\r\n    try {\r\n      await axios.get(`/backapi/user/auth?email=${email}`);\r\n      countTimeLimit();\r\n      setRequestingAuth(true);\r\n      setErrorInfo((prev) => ({\r\n        ...prev,\r\n        email: {\r\n          hasError: true,\r\n          errorMessage: '이메일 인증번호를 입력해주세요.',\r\n          emailAuth: true,\r\n        },\r\n      }));\r\n    } catch (err) {\r\n      if (err instanceof AxiosError) {\r\n        const { message } = err.response?.data;\r\n        if (err.response?.status === 402) {\r\n          setErrorInfo((prev) => ({\r\n            ...prev,\r\n            email: { hasError: true, errorMessage: message, emailAuth: false },\r\n          }));\r\n        } else {\r\n          console.error(err);\r\n          alert('오류가 발생했습니다..');\r\n          location.reload();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkEmailAuth = async () => {\r\n    try {\r\n      if (!emailAuth) {\r\n        setErrorInfo((prev) => ({\r\n          ...prev,\r\n          email: {\r\n            hasError: true,\r\n            errorMessage: '인증 번호가 입력되지 않았습니다.',\r\n            emailAuth: true,\r\n          },\r\n        }));\r\n      } else {\r\n        await axios.post(`/backapi/user/auth?email=${email}`, {\r\n          auth_password: emailAuth,\r\n        });\r\n        if (timeLimitId) {\r\n          clearInterval(timeLimitId);\r\n          setTimeLimitId(null);\r\n          setCount(60);\r\n          setEmailAuth('');\r\n          setRequestingAuth(false);\r\n          setErrorInfo((prev) => ({\r\n            ...prev,\r\n            email: {\r\n              hasError: false,\r\n              errorMessage: '인증 되었습니다.',\r\n              emailAuth: false,\r\n            },\r\n          }));\r\n        }\r\n      }\r\n    } catch (err) {\r\n      if (err instanceof AxiosError) {\r\n        const { message } = err.response?.data;\r\n        if (err.response?.status === 401) {\r\n          setErrorInfo((prev) => ({\r\n            ...prev,\r\n            email: { hasError: true, errorMessage: message, emailAuth: true },\r\n          }));\r\n        } else {\r\n          if (timeLimitId) clearInterval(timeLimitId);\r\n          console.error(err);\r\n          alert('오류가 발생했습니다..');\r\n          location.reload();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const cancelEmailAuth = () => {\r\n    if (timeLimitId) clearInterval(timeLimitId);\r\n    setTimeLimitId(null);\r\n    setCount(60);\r\n    setEmailAuth('');\r\n    setRequestingAuth(false);\r\n    setErrorInfo((prev) => ({\r\n      ...prev,\r\n      email: {\r\n        hasError: true,\r\n        errorMessage: '인증 요청버튼을 클릭하세요.',\r\n        emailAuth: true,\r\n      },\r\n    }));\r\n  };\r\n\r\n  const checkErrorValue = () => {\r\n    for (const key in errorInfo) {\r\n      if (errorInfo[key as keyof ErrorInfo].hasError) return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const handleSubmit = async (e: { preventDefault: () => void }) => {\r\n    e.preventDefault();\r\n\r\n    const hasError = checkErrorValue();\r\n    if (hasError) {\r\n      alert('양식을 다시 확인해 주세요.');\r\n      return;\r\n    }\r\n\r\n    await axios\r\n      .post('/backapi/user/sign-up', {\r\n        name,\r\n        email,\r\n        password,\r\n        profile: 'test1',\r\n      })\r\n      .then((res) => {\r\n        alert('회원가입되었습니다.');\r\n        navigate('/login');\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data.message);\r\n      });\r\n  };\r\n\r\n  const correctMessageStyle = (hasError: boolean) => {\r\n    if (!hasError) return { color: 'dodgerblue' };\r\n  };\r\n\r\n  return (\r\n    <UserFormBox pageName={'회원가입'}>\r\n      <InputContainer>\r\n        <NameBox>\r\n          <div className=\"input_box\">\r\n            <Input\r\n              type=\"text\"\r\n              name=\"name-input\"\r\n              value={name}\r\n              onChange={nameHandler}\r\n              placeholder=\"이름을 입력하세요.\"\r\n            />\r\n          </div>\r\n          <ErrorText>\r\n            <span style={correctMessageStyle(errorInfo.name.hasError)}>\r\n              {errorInfo.name.errorMessage}\r\n            </span>\r\n          </ErrorText>\r\n        </NameBox>\r\n        <EmailBox>\r\n          <div className=\"input_box\">\r\n            <Input\r\n              type=\"text\"\r\n              name=\"email-input\"\r\n              value={email}\r\n              onChange={emailHandler}\r\n              placeholder=\"이메일을 입력하세요.\"\r\n            />\r\n          </div>\r\n          {errorInfo.email.emailAuth &&\r\n            (isRequestingAuth ? (\r\n              <RequestAuthBox className=\"input_box\">\r\n                <Input\r\n                  type=\"password\"\r\n                  name=\"email-auth\"\r\n                  value={emailAuth}\r\n                  onChange={emailAuthHandler}\r\n                  placeholder=\"인증번호\"\r\n                />\r\n                <button type=\"button\" onClick={checkEmailAuth}>\r\n                  확인\r\n                </button>\r\n                <button type=\"button\" onClick={cancelEmailAuth}>\r\n                  취소\r\n                </button>\r\n                <div>\r\n                  <span>남은 시간: {count}</span>\r\n                </div>\r\n              </RequestAuthBox>\r\n            ) : (\r\n              <div className=\"email_err_message\">\r\n                <button onClick={requestEmailAuthNum}>인증 요청</button>\r\n              </div>\r\n            ))}\r\n          <ErrorText>\r\n            <span style={correctMessageStyle(errorInfo.email.hasError)}>\r\n              {errorInfo.email.errorMessage}\r\n            </span>\r\n          </ErrorText>\r\n        </EmailBox>\r\n        <PasswordBox>\r\n          <div className=\"wrap_password_input\">\r\n            <div className=\"input_box\">\r\n              <Input\r\n                type={checked ? 'text' : 'password'}\r\n                name=\"password-input\"\r\n                value={password}\r\n                onChange={passwordHandler}\r\n                placeholder=\"비밀번호를 입력하세요.\"\r\n              />\r\n              <Input\r\n                type={checked ? 'text' : 'password'}\r\n                name=\"password-check\"\r\n                value={passwordCheck}\r\n                onChange={passwordCheckHandler}\r\n                placeholder=\"한 번 더 입력하세요.\"\r\n              />\r\n            </div>\r\n            <ErrorText>\r\n              <span style={correctMessageStyle(errorInfo.password.hasError)}>\r\n                {errorInfo.password.errorMessage}\r\n              </span>\r\n            </ErrorText>\r\n          </div>\r\n          <PasswordShowCheckBox onClick={() => setChecked((prev) => !prev)}>\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"show-password\"\r\n              checked={checked}\r\n              readOnly\r\n            />\r\n            비밀번호 표시\r\n          </PasswordShowCheckBox>\r\n        </PasswordBox>\r\n        <SubmitBox>\r\n          <NavLink to={'/login'} className=\"login_link\">\r\n            로그인 화면으로 이동\r\n          </NavLink>\r\n          <Button type=\"button\" onClick={handleSubmit}>\r\n            제출\r\n          </Button>\r\n        </SubmitBox>\r\n      </InputContainer>\r\n    </UserFormBox>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","import styled from '@emotion/styled';\r\n\r\nconst buttonColor = {\r\n  warning: '#212529',\r\n  default: '#ffffff',\r\n};\r\nconst buttonBgColor = {\r\n  success: '#28a745',\r\n  error: '#dc3545',\r\n  warning: '#ffc107',\r\n  default: '#0d6efd',\r\n};\r\nconst buttonHoverBgColor = {\r\n  success: '#218838',\r\n  error: '#c82333',\r\n  warning: '#e0a800',\r\n  default: '#025ce2',\r\n};\r\n\r\nconst Button = styled.button`\r\n  -webkit-appearance: none;\r\n  -moz-appearance: none;\r\n  appearance: none;\r\n\r\n  background: ${buttonBgColor.default};\r\n  color: ${buttonColor.default};\r\n\r\n  margin: 0;\r\n  padding: 0.5rem 1rem;\r\n\r\n  font-size: 1rem;\r\n  font-weight: 400;\r\n  text-align: center;\r\n  text-decoration: none;\r\n\r\n  border: none;\r\n  border-radius: 4px;\r\n\r\n  display: inline-block;\r\n  width: auto;\r\n\r\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),\r\n    0 2px 4px -1px rgba(0, 0, 0, 0.06);\r\n\r\n  cursor: pointer;\r\n\r\n  transition: 0.5s;\r\n\r\n  &.success {\r\n    background: ${buttonBgColor.success};\r\n\r\n    &:hover,\r\n    &:active,\r\n    &:focus {\r\n      background: ${buttonHoverBgColor.success};\r\n      outline: 0;\r\n    }\r\n    &:disabled {\r\n      opacity: 0.5;\r\n    }\r\n  }\r\n\r\n  &.error {\r\n    background: ${buttonBgColor.error};\r\n\r\n    &:hover,\r\n    &:active,\r\n    &:focus {\r\n      background: ${buttonHoverBgColor.error};\r\n      outline: 0;\r\n    }\r\n    &:disabled {\r\n      opacity: 0.5;\r\n    }\r\n  }\r\n\r\n  &.warning {\r\n    color: ${buttonColor.warning};\r\n    background: ${buttonBgColor.warning};\r\n\r\n    &:hover,\r\n    &:active,\r\n    &:focus {\r\n      background: ${buttonHoverBgColor.warning};\r\n      outline: 0;\r\n    }\r\n    &:disabled {\r\n      opacity: 0.5;\r\n    }\r\n  }\r\n`;\r\n\r\nexport { Button };\r\n"],"names":["Wrapper","styled","OuterContainer","InnerContainer","children","pageName","initialValue","useState","value","setValue","onChangeForm","useCallback","e","target","InputContainer","Input","NameBox","EmailBox","RequestAuthBox","PasswordBox","PasswordShowCheckBox","SubmitBox","ErrorText","i","navigate","useNavigate","checked","setChecked","name","hasError","errorMessage","email","emailAuth","password","errorInfo","setErrorInfo","isRequestingAuth","setRequestingAuth","useInput","nameHandler","emailHandler","setEmailAuth","emailAuthHandler","passwordHandler","passwordCheck","passwordCheckHandler","emailRegex","RegExp","count","setCount","timeLimitId","setTimeLimitId","useEffect","prev","test","length","clearInterval","countTimeLimit","Id","setInterval","requestEmailAuthNum","axios","AxiosError","response","data","message","status","console","error","alert","location","reload","checkEmailAuth","auth_password","checkErrorValue","key","handleSubmit","preventDefault","profile","then","res","catch","err","log","correctMessageStyle","color","UserFormBox","className","type","onChange","placeholder","style","onClick","readOnly","to","Button"],"sourceRoot":""}